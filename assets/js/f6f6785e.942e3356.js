"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[511],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>d});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=i.createContext({}),c=function(e){var n=i.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=c(e.components);return i.createElement(p.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},f=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),u=c(t),f=r,d=u["".concat(p,".").concat(f)]||u[f]||m[f]||a;return t?i.createElement(d,l(l({ref:n},s),{},{components:t})):i.createElement(d,l({ref:n},s))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,l=new Array(a);l[0]=f;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o[u]="string"==typeof e?e:r,l[1]=o;for(var c=2;c<a;c++)l[c]=t[c];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}f.displayName="MDXCreateElement"},7179:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var i=t(7462),r=(t(7294),t(3905));const a={title:"Streaming a ZIP File of Files"},l=void 0,o={unversionedId:"file-bundle/zip-streaming",id:"file-bundle/zip-streaming",title:"Streaming a ZIP File of Files",description:"This chapter explains how to stream-download a ZIP file containing several",source:"@site/docs/file-bundle/14-zip-streaming.md",sourceDirName:"file-bundle",slug:"/file-bundle/zip-streaming",permalink:"/file-bundle/zip-streaming",draft:!1,editUrl:"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/file-bundle/14-zip-streaming.md",tags:[],version:"current",sidebarPosition:14,frontMatter:{title:"Streaming a ZIP File of Files"},sidebar:"docs",previous:{title:"Implementing a Collection of Files",permalink:"/file-bundle/collection"},next:{title:"File Association Internal Details",permalink:"/file-bundle/entity-association-internal"}},p={},c=[{value:"Concepts",id:"concepts",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"In Controllers",id:"in-controllers",level:2},{value:"Dealing With Doctrine Collections Containing Files",id:"dealing-with-doctrine-collections-containing-files",level:2},{value:"Returning a <code>DirectoryInterface</code> in the Getter Itself",id:"returning-a-directoryinterface-in-the-getter-itself",level:2},{value:"Creating a Link to the ZIP File",id:"creating-a-link-to-the-zip-file",level:2},{value:"In Twig Templates",id:"in-twig-templates",level:2}],s={toc:c},u="wrapper";function m(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,i.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This chapter explains how to stream-download a ZIP file containing several\nfiles to the client's web browser."),(0,r.kt)("admonition",{title:"Preparation",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"You need to install the package ",(0,r.kt)("inlineCode",{parentName:"p"},"rekalogika/file-zip")," to use this feature:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"composer require rekalogika/file-zip\n"))),(0,r.kt)("h2",{id:"concepts"},"Concepts"),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"DirectoryInterface")," represents a tree of files. It contains entries of\n",(0,r.kt)("inlineCode",{parentName:"p"},"FileInterface"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"FilePointerInterface"),", or other ",(0,r.kt)("inlineCode",{parentName:"p"},"DirectoryInterface"),". The\n",(0,r.kt)("inlineCode",{parentName:"p"},"FileZip")," service turns a ",(0,r.kt)("inlineCode",{parentName:"p"},"DirectoryInterface")," into a ZIP file."),(0,r.kt)("p",null,"The ZIP file is created on the fly and streamed to the client's web browser,\nand does not involve a temporary file. Therefore, the operation is relatively\ninexpensive."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"We are using the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/maennchen/ZipStream-PHP"},"ZipStream-PHP"),"\npackage under the hood.")),(0,r.kt)("h2",{id:"basic-usage"},"Basic Usage"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"FileZip::streamZip()")," method takes a ",(0,r.kt)("inlineCode",{parentName:"p"},"DirectoryInterface")," and streams\na ZIP file to the client's web browser."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"use Rekalogika\\File\\Zip\\FileZip;\nuse Rekalogika\\Contracts\\File\\DirectoryInterface;\nuse Rekalogika\\File\\Directory;\nuse Rekalogika\\Contracts\\File\\FileInterface;\n\n/** @var FileZip $fileZip */\n/** @var FileInterface $file1 */\n/** @var FileInterface $file2 */\n/** @var FileInterface $file3 */\n\n$directory = new Directory('my_zip_file', [$file1, $file2, $file3]);\n$fileZip->streamZip($directory);\n")),(0,r.kt)("h2",{id:"in-controllers"},"In Controllers"),(0,r.kt)("p",null,"To get an HTTP Foundation ",(0,r.kt)("inlineCode",{parentName:"p"},"Response")," object, use\n",(0,r.kt)("inlineCode",{parentName:"p"},"FileZip::createZipResponse()"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"use Rekalogika\\File\\Zip\\FileZip;\nuse Rekalogika\\File\\Directory;\nuse Rekalogika\\Contracts\\File\\FileInterface;\n\nclass SomeController {\n    public function download(FileZip $fileZip): Response\n    {\n        /** @var FileInterface $file1 */\n        /** @var FileInterface $file2 */\n        /** @var FileInterface $file3 */\n        \n        $directory = new Directory('my_zip_file', [$file1, $file2, $file3]);\n\n        return $fileZip->createZipResponse($directory);\n    }\n}\n")),(0,r.kt)("h2",{id:"dealing-with-doctrine-collections-containing-files"},"Dealing With Doctrine Collections Containing Files"),(0,r.kt)("p",null,"To convert a Doctrine collection of files into a ",(0,r.kt)("inlineCode",{parentName:"p"},"DirectoryInterface"),", you can\nuse ",(0,r.kt)("inlineCode",{parentName:"p"},"FileCollection"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"use Doctrine\\Common\\Collections\\Collection;\nuse Rekalogika\\Domain\\File\\Association\\Entity\\FileCollection;\nuse Rekalogika\\Contracts\\File\\DirectoryInterface;\nuse Rekalogika\\Contracts\\File\\FileInterface;\nuse Rekalogika\\File\\Directory;\nuse Rekalogika\\File\\Zip\\FileZip;\n\nclass SomeController {\n    public function download(Product $product, FileZip $fileZip): Response\n    {\n        /** @var Collection<int,Images> */\n        $images = $product->getImages();\n\n        /** @var FileCollection */\n        $directoryOfImages = new FileCollection($images, 'product-image');\n\n        return $fileZip->createZipResponse($directoryOfImages);\n    }\n}\n")),(0,r.kt)("h2",{id:"returning-a-directoryinterface-in-the-getter-itself"},"Returning a ",(0,r.kt)("inlineCode",{parentName:"h2"},"DirectoryInterface")," in the Getter Itself"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"FileCollection")," implements both ",(0,r.kt)("inlineCode",{parentName:"p"},"DirectoryInterface")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Collection"),". So, it\nis safe to return a ",(0,r.kt)("inlineCode",{parentName:"p"},"FileCollection")," in the getter because it won't change the\nexisting behavior of your getter."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"use Rekalogika\\Domain\\File\\Association\\Entity\\FileCollection;\n\nclass Product\n{\n    // ...\n\n    /**\n     * @return FileCollection<int,Image>\n     */\n    public function getImages(): FileCollection\n    {\n        return new FileCollection(\n            $this->images,\n            sprintf('product %s images', $this->getName())\n        );\n    }\n\n    // ...\n}\n")),(0,r.kt)("p",null,"Then, you can do something like this in the controller:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"use Rekalogika\\File\\Zip\\FileZip;\n\nclass SomeController {\n    public function download(Product $product, FileZip $fileZip): Response\n    {\n        return $fileZip->createZipResponse($product->getImages());\n    }\n}\n")),(0,r.kt)("h2",{id:"creating-a-link-to-the-zip-file"},"Creating a Link to the ZIP File"),(0,r.kt)("p",null,"The framework registers a temporary URL handler. So, you can simply use\n",(0,r.kt)("inlineCode",{parentName:"p"},"TemporaryUrlGeneratorInterface::generateUrl()")," to generate a temporary URL\nto the ZIP file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"use Rekalogika\\TemporaryUrl\\TemporaryUrlGeneratorInterface;\n\n/** @var TemporaryUrlGeneratorInterface $temporaryUrlGenerator */\n\n/** @var FileCollection */\n$images = $product->getImages();\n\n$url = $temporaryUrlGenerator->generateUrl($images);\n")),(0,r.kt)("h2",{id:"in-twig-templates"},"In Twig Templates"),(0,r.kt)("p",null,"In Twig templates, you can easily generate URLs to a ZIP file by using the\n",(0,r.kt)("inlineCode",{parentName:"p"},"temporary_url")," filter with a ",(0,r.kt)("inlineCode",{parentName:"p"},"DirectoryInterface")," as the input."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-twig"},'<a href="{{ product.images|temporary_url }}" {{ temporary_url_autoexpire() }}>\n    Download Product Images\n</a>\n')))}m.isMDXComponent=!0}}]);