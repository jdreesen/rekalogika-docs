"use strict";(self.webpackChunkrekalogika_docs=self.webpackChunkrekalogika_docs||[]).push([[6559],{5959:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var a=t(5893),i=t(1151);const s={title:"Manual Control"},o=void 0,l={id:"domain-event/manual-control",title:"Manual Control",description:"To manually manage domain events, you can use",source:"@site/docs/domain-event/02-manual-control.md",sourceDirName:"domain-event",slug:"/domain-event/manual-control",permalink:"/domain-event/manual-control",draft:!1,unlisted:!1,editUrl:"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/domain-event/02-manual-control.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Manual Control"},sidebar:"docs",previous:{title:"Basic Usage",permalink:"/domain-event/basic-usage"},next:{title:"Immediate Dispatcher Handling & Troubleshooting",permalink:"/domain-event/immediate-dispatcher"}},r={},c=[{value:"Manual Dispatching",id:"manual-dispatching",level:2},{value:"Clearing Events",id:"clearing-events",level:2},{value:"Getting the Events in the Queue",id:"getting-the-events-in-the-queue",level:2},{value:"Immediate Dispatcher Installation",id:"immediate-dispatcher-installation",level:2}];function d(e){const n={admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["To manually manage domain events, you can use\n",(0,a.jsx)(n.code,{children:"DomainEventAwareEntityManagerInterface"})," in place of the regular\n",(0,a.jsx)(n.code,{children:"EntityManagerInterface"}),". It adds several methods to the Entity Manager that you\ncan use to manage domain event dispatching."]}),"\n",(0,a.jsx)(n.h2,{id:"manual-dispatching",children:"Manual Dispatching"}),"\n",(0,a.jsxs)(n.p,{children:["You can disable automatic dispatching on ",(0,a.jsx)(n.code,{children:"flush()"})," by calling\n",(0,a.jsx)(n.code,{children:"setAutoDispatchDomainEvents(false)"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"/** @var DomainEventAwareEntityManagerInterface $entityManager */\n\n$entityManager->setAutoDispatchDomainEvents(false);\n\n// ...\n\n$entityManager->dispatchPreFlushDomainEvents();\n$entityManager->flush();\n$entityManager->dispatchPostFlushDomainEvents();\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["Immediate dispatching is dispatched outside ",(0,a.jsx)(n.code,{children:"DomainEventManager"})," and\n",(0,a.jsx)(n.code,{children:"DomainEventAwareEntityManager"}),", and therefore unaffected by\n",(0,a.jsx)(n.code,{children:"setAutoDispatchDomainEvents()"}),"."]})}),"\n",(0,a.jsx)(n.h2,{id:"clearing-events",children:"Clearing Events"}),"\n",(0,a.jsxs)(n.p,{children:["If the domain event queues are not empty at the end of the request,\n",(0,a.jsx)(n.code,{children:"DomainEventManager"})," will throw ",(0,a.jsx)(n.code,{children:"UndispatchedEventsException"}),". To prevent that\nfrom happening, if you disable auto-dispatch, you need to make sure that you\ndispatch both pre-flush and post-flush events as above. Alternatively, you can\nclear the events if you don't want them dispatched:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"/** @var DomainEventAwareEntityManagerInterface $entityManager */\n\n$entityManager->setAutoDispatchDomainEvents(false);\n\n// ...\n\n$entityManager->flush();\n$entityManager->clearDomainEvents();\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["In the event of an uncaught error, the framework will automatically\nclear undispatched events using the ",(0,a.jsx)(n.code,{children:"kernel.exception"})," and ",(0,a.jsx)(n.code,{children:"console.error"}),"\nevents, so in such cases, you don't have to handle that manually. But if you\ncatch an exception that previously caused pending events not to be dispatched,\nyou need to manually clear the events."]})}),"\n",(0,a.jsx)(n.h2,{id:"getting-the-events-in-the-queue",children:"Getting the Events in the Queue"}),"\n",(0,a.jsxs)(n.p,{children:["You can get the undispatched events in the queue by calling ",(0,a.jsx)(n.code,{children:"popDomainEvents()"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"/** @var DomainEventAwareEntityManagerInterface $entityManager */\n\n$events = $entityManager->popDomainEvents();\n"})}),"\n",(0,a.jsx)(n.p,{children:"This can be useful if you want to dispatch the events in another process, or\nstore them in a database, etc."}),"\n",(0,a.jsx)(n.h2,{id:"immediate-dispatcher-installation",children:"Immediate Dispatcher Installation"}),"\n",(0,a.jsx)(n.p,{children:"Immediate event dispatcher works by installing the event dispatcher to a static\nvariable. This installation happens on several opportunities:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["In these events: ",(0,a.jsx)(n.code,{children:"kernel.request"})," and ",(0,a.jsx)(n.code,{children:"console.command"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["During the initialization of ",(0,a.jsx)(n.code,{children:"ManagerRegistry"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["During the initialization of an ",(0,a.jsx)(n.code,{children:"EntityManagerInterface"}),"."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"When none of these occurs, there is no opportunity to install the event\ndispatcher. This usually happens only in isolated unit tests. To fix the\nproblem, you can install a stub event dispatcher manually like the following."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"use PHPUnit\\Framework\\TestCase;\nuse Rekalogika\\DomainEvent\\ImmediateDomainEventDispatcherInstaller;\nuse Symfony\\Component\\EventDispatcher\\EventDispatcher;\n\nclass SomeTest extends TestCase\n{\n    public function setUp(): void\n    {\n        $installer = new ImmediateDomainEventDispatcherInstaller(new EventDispatcher);\n        $installer->install();\n\n    }\n\n    // ...\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["In integration tests where you have access to the service container, but the\ntests don't involve ",(0,a.jsx)(n.code,{children:"EntityManager"})," or ",(0,a.jsx)(n.code,{children:"ManagerRegistry"}),", you can pull the\ninstaller from the container to install the immediate dispatcher:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"use Rekalogika\\DomainEvent\\ImmediateDomainEventDispatcherInstaller;\nuse Symfony\\Bundle\\FrameworkBundle\\Test\\KernelTestCase;\n\nclass SomeTest extends KernelTestCase\n{\n    public function setUp(): void\n    {\n        self::bootKernel();\n        static::getContainer()\n          ->get(ImmediateDomainEventDispatcherInstaller::class)->install();\n    }\n\n    // ...\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>o});var a=t(7294);const i={},s=a.createContext(i);function o(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);