"use strict";(self.webpackChunkrekalogika_docs=self.webpackChunkrekalogika_docs||[]).push([[6051],{3042:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>p,default:()=>m,frontMatter:()=>r,metadata:()=>c,toc:()=>i});var a=t(5893),o=t(1151);const r={title:"Manual Mapping using an Object Mapper"},p=void 0,c={id:"mapper/object-mapper",title:"Manual Mapping using an Object Mapper",description:"If you need a custom logic in an object to another object mapping, one way to do",source:"@site/docs/mapper/06-object-mapper.md",sourceDirName:"mapper",slug:"/mapper/object-mapper",permalink:"/mapper/object-mapper",draft:!1,unlisted:!1,editUrl:"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/mapper/06-object-mapper.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"Manual Mapping using an Object Mapper"},sidebar:"docs",previous:{title:"Mapping Between Object and Array",permalink:"/mapper/object-array"},next:{title:"Manual Mapping using a Class Factory Method",permalink:"/mapper/class-factory-mapper"}},s={},i=[{value:"Extra Arguments",id:"extra-arguments",level:3}];function u(e){const n={a:"a",code:"code",h3:"h3",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["If you need a custom logic in an object to another object mapping, one way to do\nit is to create a service, and add the ",(0,a.jsx)(n.code,{children:"AsObjectMapper"})," attribute to a method."]}),"\n",(0,a.jsx)(n.p,{children:"Example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"use Brick\\Money\\Money;\nuse Rekalogika\\Mapper\\Attribute\\AsObjectMapper;\n\nclass MoneyObjectMapper\n{\n    #[AsObjectMapper]\n    public function mapMoneyToMoneyDto(Money $money): MoneyDto\n    {\n        return new MoneyDto(\n            $money->getAmount()->__toString(),\n            $money->getCurrency()->getCurrencyCode(),\n        );\n    }\n\n    #[AsObjectMapper]\n    public function mapMoneyDtoToMoney(MoneyDto $moneyDto): Money\n    {\n        return Money::of($moneyDto->getAmount(), $moneyDto->getCurrency());\n    }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"extra-arguments",children:"Extra Arguments"}),"\n",(0,a.jsx)(n.p,{children:"You also have the option to inject the main transformer, sub-mapper, and the\ncontext to the property mapper. This can be in any order, but the first argument\nmust be the source object."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"use Brick\\Money\\Money;\nuse Rekalogika\\Mapper\\Attribute\\AsObjectMapper;\nuse Rekalogika\\Mapper\\Context\\Context;\nuse Rekalogika\\Mapper\\MainTransformerInterface;\nuse Rekalogika\\Mapper\\SubMapper\\SubMapperInterface;\n\nclass MoneyObjectMapper\n{\n    #[AsObjectMapper]\n    public function mapMoneyToMoneyDto(\n        Money $money,\n        // highlight-start\n        MainTransformerInterface $mainTransformer,\n        SubMapperInterface $subMapper,\n        Context $context\n        // highlight-end\n    ): MoneyDto {\n        return new MoneyDto(\n            $money->getAmount()->__toString(),\n            $money->getCurrency()->getCurrencyCode(),\n        );\n    }\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Read more about the sub mapper in the ",(0,a.jsx)(n.a,{href:"submapper",children:"SubMapper"})," chapter."]})]})}function m(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>c,a:()=>p});var a=t(7294);const o={},r=a.createContext(o);function p(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:p(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);