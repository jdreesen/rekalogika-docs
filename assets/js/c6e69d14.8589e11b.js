"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3823],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(n),m=i,g=p["".concat(c,".").concat(m)]||p[m]||d[m]||r;return n?a.createElement(g,o(o({ref:t},u),{},{components:n})):a.createElement(g,o({ref:t},u))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7294),i=n(6010);const r={tabItem:"tabItem_Ymn6"};function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,i.Z)(r.tabItem,o),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>C});var a=n(7462),i=n(7294),r=n(6010),o=n(2466),l=n(6550),c=n(1980),s=n(7392),u=n(12);function p(e){return function(e){return i.Children.map(e,(e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:i}}=e;return{value:t,label:n,attributes:a,default:i}}))}function d(e){const{values:t,children:n}=e;return(0,i.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,s.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:n}=e;const a=(0,l.k6)(),r=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,c._X)(r),(0,i.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(a.location.search);t.set(r,e),a.replace({...a.location,search:t.toString()})}),[r,a])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,r=d(e),[o,l]=(0,i.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:r}))),[c,s]=g({queryString:n,groupId:a}),[p,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,r]=(0,u.Nk)(n);return[a,(0,i.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:a}),h=(()=>{const e=c??p;return m({value:e,tabValues:r})?e:null})();(0,i.useLayoutEffect)((()=>{h&&l(h)}),[h]);return{selectedValue:o,selectValue:(0,i.useCallback)((e=>{if(!m({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);l(e),s(e),f(e)}),[s,f,r]),tabValues:r}}var h=n(2389);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function y(e){let{className:t,block:n,selectedValue:l,selectValue:c,tabValues:s}=e;const u=[],{blockElementScrollPositionUntilNextRender:p}=(0,o.o5)(),d=e=>{const t=e.currentTarget,n=u.indexOf(t),a=s[n].value;a!==l&&(p(t),c(a))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},t)},s.map((e=>{let{value:t,label:n,attributes:o}=e;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>u.push(e),onKeyDown:m,onClick:d},o,{className:(0,r.Z)("tabs__item",b.tabItem,o?.className,{"tabs__item--active":l===t})}),n??t)})))}function k(e){let{lazy:t,children:n,selectedValue:a}=e;const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=r.find((e=>e.props.value===a));return e?(0,i.cloneElement)(e,{className:"margin-top--md"}):null}return i.createElement("div",{className:"margin-top--md"},r.map(((e,t)=>(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function v(e){const t=f(e);return i.createElement("div",{className:(0,r.Z)("tabs-container",b.tabList)},i.createElement(y,(0,a.Z)({},e,t)),i.createElement(k,(0,a.Z)({},e,t)))}function C(e){const t=(0,h.Z)();return i.createElement(v,(0,a.Z)({key:String(t)},e))}},6178:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>c,default:()=>g,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var a=n(7462),i=(n(7294),n(3905)),r=n(4866),o=n(5162);const l={title:"Implementing a Collection of Files"},c=void 0,s={unversionedId:"file-bundle/collection",id:"file-bundle/collection",title:"Implementing a Collection of Files",description:"This chapter describes how to implement a collection of files, or one-to-many",source:"@site/docs/file-bundle/13-collection.md",sourceDirName:"file-bundle",slug:"/file-bundle/collection",permalink:"/file-bundle/collection",draft:!1,editUrl:"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/file-bundle/13-collection.md",tags:[],version:"current",sidebarPosition:13,frontMatter:{title:"Implementing a Collection of Files"},sidebar:"docs",previous:{title:"Replicating Metadata in Entities",permalink:"/file-bundle/replicating-metadata-in-entities"},next:{title:"Streaming a ZIP File of Files",permalink:"/file-bundle/zip-streaming"}},u={},p=[{value:"Summary",id:"summary",level:2},{value:"The <code>many-to-one</code> Side",id:"the-many-to-one-side",level:2},{value:"The <code>one-to-many</code> Side",id:"the-one-to-many-side",level:2},{value:"(Optional) Accepting <code>FileInterface</code> in the Adder",id:"optional-accepting-fileinterface-in-the-adder",level:2},{value:"(Optional) Decorate the Collection Using <code>FileCollection</code>",id:"optional-decorate-the-collection-using-filecollection",level:2},{value:"Using The Relation",id:"using-the-relation",level:2},{value:"Indexing and Querying by File Properties",id:"indexing-and-querying-by-file-properties",level:2}],d={toc:p},m="wrapper";function g(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This chapter describes how to implement a collection of files, or one-to-many\nrelation between a Doctrine entity and several files."),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"This is what we do to implement a one-to-many relation between an entity and\nseveral files:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create a new entity that will represent a file. For convenience, we provide\n",(0,i.kt)("inlineCode",{parentName:"p"},"AbstractFile")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"FileTrait")," that your entity can extend or use.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create a one-to-many relation from an entity to the entity in #1."))),(0,i.kt)("admonition",{title:"Preparation",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"You need to install the package ",(0,i.kt)("inlineCode",{parentName:"p"},"rekalogika/file-association-entity")," to use this\nfeature:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"composer require rekalogika/file-association-entity\n"))),(0,i.kt)("h2",{id:"the-many-to-one-side"},"The ",(0,i.kt)("inlineCode",{parentName:"h2"},"many-to-one")," Side"),(0,i.kt)("p",null,"In the following example, we will be creating an entity ",(0,i.kt)("inlineCode",{parentName:"p"},"Product")," that will\nhave multiple ",(0,i.kt)("inlineCode",{parentName:"p"},"Image"),"s."),(0,i.kt)("p",null,"You will need your ",(0,i.kt)("inlineCode",{parentName:"p"},"Product")," entity to extend ",(0,i.kt)("inlineCode",{parentName:"p"},"AbstractFile"),". Alternatively, if\nyour entity needs to extend another entity, you can use the trait ",(0,i.kt)("inlineCode",{parentName:"p"},"FileTrait"),"\ninstead."),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"abstract",label:"By Extending AbstractFile",mdxType:"TabItem"},(0,i.kt)("p",null,"Create the ",(0,i.kt)("inlineCode",{parentName:"p"},"Image")," entity by extending ",(0,i.kt)("inlineCode",{parentName:"p"},"AbstractFile"),". The following are the\nrelevant parts."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"use Doctrine\\ORM\\Mapping as ORM;\nuse Rekalogika\\Domain\\File\\Association\\Entity\\AbstractFile;\n\n#[ORM\\Entity]\nclass Image extends AbstractFile\n{\n    // ...\n\n    #[ORM\\ManyToOne(inversedBy: 'images')]\n    #[ORM\\JoinColumn(nullable: false)]\n    private ?Product $product = null;\n\n    public function getProduct(): ?Product\n    {\n        return $this->product;\n    }\n\n    public function setProduct(?Product $product): static\n    {\n        $this->product = $product;\n\n        return $this;\n    }\n\n    // ...\n}\n"))),(0,i.kt)(o.Z,{value:"trait",label:"By Using FileTrait",mdxType:"TabItem"},(0,i.kt)("p",null,"Create the ",(0,i.kt)("inlineCode",{parentName:"p"},"Image")," entity by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"FileTrait"),". The following are the\nrelevant parts."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"use Doctrine\\ORM\\Mapping as ORM;\nuse Rekalogika\\Domain\\File\\Association\\Entity\\AbstractFile;\nuse Rekalogika\\Contracts\\File\\FileInterface;\nuse Rekalogika\\File\\Association\\Attribute\\WithFileAssociation;\n\n#[ORM\\Entity]\n#[WithFileAssociation]\nclass Image implements FileInterface\n{\n    use FileTrait;\n\n    #[ORM\\ManyToOne(inversedBy: 'images')]\n    #[ORM\\JoinColumn(nullable: false)]\n    private ?Product $product = null;\n\n    public function getProduct(): ?Product\n    {\n        return $this->product;\n    }\n\n    public function setProduct(?Product $product): static\n    {\n        $this->product = $product;\n\n        return $this;\n    }\n}\n")),(0,i.kt)("p",null,"If you don't use attributes to configure your Doctrine mappings, you will need\nto add the following configuration to the Doctrine's mapping configuration."),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"xml",label:"XML",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'<doctrine-mapping>\n    \x3c!-- ... --\x3e\n    <entity name="Image">\n        \x3c!-- ... --\x3e\n        <embedded\n             name="metadata"\n             class="Rekalogika\\Domain\\File\\Association\\Entity\\EmbeddedMetadata" />\n    </entity>\n    \x3c!-- ... --\x3e\n</doctrine-mapping>\n')))))),(0,i.kt)("h2",{id:"the-one-to-many-side"},"The ",(0,i.kt)("inlineCode",{parentName:"h2"},"one-to-many")," Side"),(0,i.kt)("p",null,"The relevant parts:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"use Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\n\n#[ORM\\Entity]\nclass Product\n{\n    // ...\n\n    #[ORM\\OneToMany(mappedBy: 'product', targetEntity: Image::class, orphanRemoval: true)]\n    private Collection $images;\n\n    public function __construct()\n    {\n        $this->images = new ArrayCollection();\n    }\n\n    /**\n     * @return Collection<int, Image>\n     */\n    public function getImages(): Collection\n    {\n        return $this->images;\n    }\n\n    public function addImage(Image $image): static\n    {\n        if (!$this->images->contains($image)) {\n            $this->images->add($image);\n            $image->setProduct($this);\n        }\n\n        return $this;\n    }\n\n    public function removeImage(Image $image): static\n    {\n        if ($this->images->removeElement($image)) {\n            // set the owning side to null (unless already changed)\n            if ($image->getProduct() === $this) {\n                $image->setProduct(null);\n            }\n        }\n\n        return $this;\n    }\n\n    // ...\n}\n")),(0,i.kt)("h2",{id:"optional-accepting-fileinterface-in-the-adder"},"(Optional) Accepting ",(0,i.kt)("inlineCode",{parentName:"h2"},"FileInterface")," in the Adder"),(0,i.kt)("p",null,"For convenience, you might also want to modify the adder ",(0,i.kt)("inlineCode",{parentName:"p"},"addImage")," above so\nthat it also accepts an instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"FileInterface"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"use Rekalogika\\Contracts\\File\\FileInterface;\n\nclass Product\n{\n    // ...\n\n    // highlight-next-line\n    public function addImage(Image|FileInterface $image): static\n    {\n        // highlight-start\n        if (!$image instanceof Image) {\n            $image = new Image($image);\n        }\n        // highlight-end\n\n        if (!$this->images->contains($image)) {\n            $this->images->add($image);\n            $image->setProduct($this);\n        }\n\n        return $this;\n    }\n\n    // ...\n}\n")),(0,i.kt)("h2",{id:"optional-decorate-the-collection-using-filecollection"},"(Optional) Decorate the Collection Using ",(0,i.kt)("inlineCode",{parentName:"h2"},"FileCollection")),(0,i.kt)("p",null,"In the getter, you can also return a ",(0,i.kt)("inlineCode",{parentName:"p"},"FileCollection")," wrapping the original\ncollection, and change the type hint. Then, the caller will be able to know that\nthe Collection contains files and also an instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"DirectoryInterface"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"use Rekalogika\\Domain\\File\\Association\\Entity\\FileCollection;\n\nclass Product\n{\n    // ...\n\n    /**\n     * @return FileCollection<int,Image>\n     */\n    public function getImages(): FileCollection\n    {\n        return new FileCollection(\n            $this->images,\n            sprintf('product %s images', $this->getName())\n        );\n    }\n\n    // ...\n}\n")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"The second argument of ",(0,i.kt)("inlineCode",{parentName:"p"},"FileCollection")," is the name of the file collection,\nand will be used for the directory name, ZIP file name, etc."),(0,i.kt)("p",{parentName:"admonition"},"Read the chapter ",(0,i.kt)("a",{parentName:"p",href:"zip-streaming"},"Stream a ZIP File")," if you need to download\nan entire collection as a ZIP file.")),(0,i.kt)("admonition",{title:"Protip",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"There is also ",(0,i.kt)("inlineCode",{parentName:"p"},"ReadableFileCollection"),", which is the read-only flavor of\n",(0,i.kt)("inlineCode",{parentName:"p"},"FileCollection"),".")),(0,i.kt)("h2",{id:"using-the-relation"},"Using The Relation"),(0,i.kt)("p",null,"By following the guide above, your ",(0,i.kt)("inlineCode",{parentName:"p"},"Image")," entity is a ",(0,i.kt)("inlineCode",{parentName:"p"},"FileInterface"),".\nTherefore, with the example above, you can treat the ",(0,i.kt)("inlineCode",{parentName:"p"},"Image")," entity as a file."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"use Rekalogika\\File\\File;\n\n$product = new Product();\n$image1 = new File('product_image_1.jpg');\n$image2 = new File('product_image_2.jpg');\n$image3 = new File('product_image_3.jpg');\n\n$product\n    ->addImage($image1)\n    ->addImage($image2)\n    ->addImage($image3);\n\nforeach ($product->getImages() as $image) {\n    $name = $image->getName(); // product_image_1.jpg, etc.\n    $description = $image->getType()->getDescription(); // \"JPEG image\", etc.\n}\n")),(0,i.kt)("h2",{id:"indexing-and-querying-by-file-properties"},"Indexing and Querying by File Properties"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"AbstractFile")," uses ",(0,i.kt)("inlineCode",{parentName:"p"},"EmbeddedMetadata")," under the hood. Read more about it in the\n",(0,i.kt)("a",{parentName:"p",href:"replicating-metadata-in-entities"},"Replicating Metadata in Entities")," section."))}g.isMDXComponent=!0}}]);