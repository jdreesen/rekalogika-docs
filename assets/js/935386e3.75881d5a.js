"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1751],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>y});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},c=Object.keys(e);for(o=0;o<c.length;o++)n=c[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(o=0;o<c.length;o++)n=c[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),l=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=l(e.components);return o.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},f=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,c=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(n),f=r,y=u["".concat(s,".").concat(f)]||u[f]||d[f]||c;return n?o.createElement(y,a(a({ref:t},p),{},{components:n})):o.createElement(y,a({ref:t},p))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var c=n.length,a=new Array(c);a[0]=f;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:r,a[1]=i;for(var l=2;l<c;l++)a[l]=n[l];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}f.displayName="MDXCreateElement"},8827:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>c,metadata:()=>i,toc:()=>l});var o=n(7462),r=(n(7294),n(3905));const c={title:"Type Safety"},a=void 0,i={unversionedId:"doctrine-collections-decorator/use-cases/type-safety",id:"doctrine-collections-decorator/use-cases/type-safety",title:"Type Safety",description:"We can use collection decoration to ensure that the items in a collection are of",source:"@site/docs/doctrine-collections-decorator/use-cases/11-type-safety.md",sourceDirName:"doctrine-collections-decorator/use-cases",slug:"/doctrine-collections-decorator/use-cases/type-safety",permalink:"/doctrine-collections-decorator/use-cases/type-safety",draft:!1,editUrl:"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/doctrine-collections-decorator/use-cases/11-type-safety.md",tags:[],version:"current",sidebarPosition:11,frontMatter:{title:"Type Safety"},sidebar:"docs",previous:{title:"Usage",permalink:"/doctrine-collections-decorator/usage"},next:{title:"Record Precounting",permalink:"/doctrine-collections-decorator/use-cases/record-precounting"}},s={},l=[],p={toc:l},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"We can use collection decoration to ensure that the items in a collection are of\na certain type."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @extends AbstractCollectionDecorator<array-key,Book>\n */\nclass TypedCollectionDecorator extends AbstractCollectionDecorator\n{\n    /**\n     * @param Collection<array-key,Book> $wrapped\n     */\n    public function __construct(private Collection $wrapped)\n    {\n    }\n\n    protected function getWrapped(): Collection\n    {\n        return $this->wrapped;\n    }\n\n    private static function ensure(mixed $book): Book\n    {\n        if (!$book instanceof Book) {\n            throw new \\InvalidArgumentException('Invalid input');\n        }\n\n        return $book;\n    }\n\n    public function add(mixed $element): void\n    {\n        $this->getWrapped()->add(self::ensure($element));\n    }\n\n    public function set(string|int $key, mixed $value): void\n    {\n        $this->getWrapped()->set($key, self::ensure($value));\n    }\n}\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"We think it is superfluous most of the time considering that static analysis\ntools can do a pretty good job these days. But it is also the most common\nobjective of people wanting to have a custom Doctrine collection.")))}d.isMDXComponent=!0}}]);