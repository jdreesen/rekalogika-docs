"use strict";(self.webpackChunkrekalogika_docs=self.webpackChunkrekalogika_docs||[]).push([[5914],{7466:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var n=r(5893),a=r(1151);const s={title:"Mapping Object to Object"},o=void 0,p={id:"mapper/object",title:"Mapping Object to Object",description:"Mapping an object to another object is the most common task done by a mapper.",source:"@site/docs/mapper/02-object.md",sourceDirName:"mapper",slug:"/mapper/object",permalink:"/mapper/object",draft:!1,unlisted:!1,editUrl:"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/mapper/02-object.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Mapping Object to Object"},sidebar:"docs",previous:{title:"Basic Usage",permalink:"/mapper/usage"},next:{title:"Mapping Arrays & Array-Like Objects",permalink:"/mapper/collection"}},i={},c=[{value:"How It Works",id:"how-it-works",level:2},{value:"Custom Property Mapper",id:"custom-property-mapper",level:2}];function l(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["Mapping an object to another object is the most common task done by a mapper.\nInternally, this task is done by ",(0,n.jsx)(t.code,{children:"ObjectToObjectTransformer"}),"."]}),"\n",(0,n.jsx)(t.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,n.jsx)(t.p,{children:"The mapper identifies properties that have the same name on the source and the\ntarget side. It looks at public properties, public getters & setters, and\nconstructor arguments. It then transforms each source value to the target type,\nand either sets the target property or adds it to the constructor arguments."}),"\n",(0,n.jsx)(t.h2,{id:"custom-property-mapper",children:"Custom Property Mapper"}),"\n",(0,n.jsxs)(t.p,{children:["If you need a custom mapping logic for a specific property, you can create a\nservice and add the attribute ",(0,n.jsx)(t.code,{children:"AsPropertyMapper"})," to a custom method. Example:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-php",children:"use Rekalogika\\Mapper\\PropertyMapper\\AsPropertyMapper;\n\nclass UserMapper\n{\n    #[AsPropertyMapper(\n        sourceClass: User::class,\n        targetClass: UserDto::class,\n        property: 'name',\n    )]\n    public function mapName(User $user): string\n    {\n        return strtoupper($user->getFirstName() . ' ' . $user->getLastName());\n    }\n}\n"})}),"\n",(0,n.jsxs)(t.p,{children:["The above example concatenates first name and last name from the source object,\ntransforms it to uppercase, and returns the result. The framework will then\nassign the result to the ",(0,n.jsx)(t.code,{children:"name"})," property of the target object, as specified in\nthe 'property' argument of the ",(0,n.jsx)(t.code,{children:"AsPropertyMapper"})," attribute."]}),"\n",(0,n.jsx)(t.p,{children:"If you have many properties to manually map, you can also do the following\nshorthand:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-php",children:"use Rekalogika\\Mapper\\PropertyMapper\\AsPropertyMapper;\n\n#[AsPropertyMapper(\n    sourceClass: User::class,\n    targetClass: UserDto::class,\n)]\nclass UserMapper\n{\n    #[AsPropertyMapper('name')]\n    public function mapName(User $user): string\n    {\n        return strtoupper($user->getFirstName() . ' ' . $user->getLastName());\n    }\n\n    #[AsPropertyMapper('birthDate')]\n    public function mapBirthDate(User $user): string\n    {\n        return $user->getBirthDate()->format('Y-m-d');\n    }\n\n    #[AsPropertyMapper('email')]\n    public function mapEmail(User $user): string\n    {\n        return $user->getEmailAddress();\n    }\n}\n"})}),"\n",(0,n.jsx)(t.p,{children:"If you don't use autowiring, autoconfiguration, or don't want to use attributes,\nyou can add the service manually like this:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yaml",metastring:'title="config/services.yaml"',children:"services:\n    App\\Mapper\\UserMapper:\n        tags:\n            -\n                name: 'rekalogika.mapper.property_mapper'\n                method: 'mapName'\n                sourceClass: 'App\\Entity\\User'\n                targetClass: 'App\\Dto\\UserDto'\n                property: 'name'\n            -\n                name: 'rekalogika.mapper.property_mapper'\n                method: 'mapBirthDate'\n                sourceClass: 'App\\Entity\\User'\n                targetClass: 'App\\Dto\\UserDto'\n                property: 'birthDate'\n            -\n                name: 'rekalogika.mapper.property_mapper'\n                method: 'mapEmail'\n                sourceClass: 'App\\Entity\\User'\n                targetClass: 'App\\Dto\\UserDto'\n                property: 'email'\n"})}),"\n",(0,n.jsx)(t.p,{children:"To dump the list of all property mappers, run the following command:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"$ bin/console debug:container --tag=rekalogika.mapper.property_mapper\n"})})]})}function m(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},1151:(e,t,r)=>{r.d(t,{Z:()=>p,a:()=>o});var n=r(7294);const a={},s=n.createContext(a);function o(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function p(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);