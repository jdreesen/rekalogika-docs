"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[903],{3905:(e,t,i)=>{i.d(t,{Zo:()=>p,kt:()=>g});var a=i(7294);function n(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function l(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,a)}return i}function r(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?l(Object(i),!0).forEach((function(t){n(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):l(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function o(e,t){if(null==e)return{};var i,a,n=function(e,t){if(null==e)return{};var i,a,n={},l=Object.keys(e);for(a=0;a<l.length;a++)i=l[a],t.indexOf(i)>=0||(n[i]=e[i]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)i=l[a],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(n[i]=e[i])}return n}var s=a.createContext({}),f=function(e){var t=a.useContext(s),i=t;return e&&(i="function"==typeof e?e(t):r(r({},t),e)),i},p=function(e){var t=f(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var i=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=f(i),d=n,g=c["".concat(s,".").concat(d)]||c[d]||m[d]||l;return i?a.createElement(g,r(r({ref:t},p),{},{components:i})):a.createElement(g,r({ref:t},p))}));function g(e,t){var i=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=i.length,r=new Array(l);r[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:n,r[1]=o;for(var f=2;f<l;f++)r[f]=i[f];return a.createElement.apply(null,r)}return a.createElement.apply(null,i)}d.displayName="MDXCreateElement"},2025:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>f});var a=i(7462),n=(i(7294),i(3905));const l={title:"Using File & FileRepository"},r=void 0,o={unversionedId:"file/file",id:"file/file",title:"Using File & FileRepository",description:"When using this framework, the user will primarily work with the",source:"@site/docs/file/03-file.md",sourceDirName:"file",slug:"/file/file",permalink:"/file/file",draft:!1,editUrl:"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/file/03-file.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Using File & FileRepository"},sidebar:"docs",previous:{title:"Concepts & Terms",permalink:"/file/concepts"},next:{title:"Adapters",permalink:"/file/adapters"}},s={},f=[{value:"Working With a File Repository",id:"working-with-a-file-repository",level:2},{value:"Create a file from a string",id:"create-a-file-from-a-string",level:3},{value:"Create a file from a stream",id:"create-a-file-from-a-stream",level:3},{value:"Create a file from a local file",id:"create-a-file-from-a-local-file",level:3},{value:"Get a file",id:"get-a-file",level:3},{value:"Delete a file",id:"delete-a-file",level:3},{value:"Copy and move a file",id:"copy-and-move-a-file",level:3},{value:"Create a temporary file",id:"create-a-temporary-file",level:3},{value:"Working With a File",id:"working-with-a-file",level:2},{value:"Reading the file&#39;s content",id:"reading-the-files-content",level:3},{value:"Writing to the file, replacing its content",id:"writing-to-the-file-replacing-its-content",level:3},{value:"Renaming the file",id:"renaming-the-file",level:3},{value:"Saving to a local file",id:"saving-to-a-local-file",level:3},{value:"Media type (MIME type) handling",id:"media-type-mime-type-handling",level:3},{value:"File size &amp; last modified time",id:"file-size--last-modified-time",level:3},{value:"Image metadata",id:"image-metadata",level:3},{value:"HTTP metadata",id:"http-metadata",level:3},{value:"Flushing metadata",id:"flushing-metadata",level:3},{value:"File Pointer &amp; comparison",id:"file-pointer--comparison",level:3}],p={toc:f},c="wrapper";function m(e){let{components:t,...i}=e;return(0,n.kt)(c,(0,a.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"When using this framework, the user will primarily work with the\n",(0,n.kt)("inlineCode",{parentName:"p"},"FileRepositoryInterface")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"FileInterface")," objects."),(0,n.kt)("h2",{id:"working-with-a-file-repository"},"Working With a File Repository"),(0,n.kt)("h3",{id:"create-a-file-from-a-string"},"Create a file from a string"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"use Rekalogika\\Contracts\\File\\FileRepositoryInterface;\nuse Rekalogika\\File\\FilePointer;\n\n/** @var FileRepositoryInterface $fileRepository */\n\n$file = $fileRepository->createFromString(\n    new FilePointer('default', 'key'),\n    'Hello World!'\n);\n")),(0,n.kt)("admonition",{type:"warning"},(0,n.kt)("p",{parentName:"admonition"},"Will overwrite the existing file if it already exists.")),(0,n.kt)("h3",{id:"create-a-file-from-a-stream"},"Create a file from a stream"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"use Psr\\Http\\Message\\StreamInterface;\nuse Rekalogika\\Contracts\\File\\FileRepositoryInterface;\nuse Rekalogika\\File\\FilePointer;\n\n/** @var FileRepositoryInterface $fileRepository */\n/** @var resource|StreamInterface $stream */\n\n$file = $fileRepository->createFromStream(\n    new FilePointer('default', 'key'),\n    $stream\n);\n")),(0,n.kt)("admonition",{type:"warning"},(0,n.kt)("p",{parentName:"admonition"},"Will overwrite the existing file if it already exists.")),(0,n.kt)("h3",{id:"create-a-file-from-a-local-file"},"Create a file from a local file"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"use Rekalogika\\Contracts\\File\\FileRepositoryInterface;\nuse Rekalogika\\File\\FilePointer;\n\n/** @var FileRepositoryInterface $fileRepository */\n\n$file = $fileRepository->createFromLocalFile(\n    new FilePointer('default', 'key'),\n    '/tmp/foo.txt'\n);\n")),(0,n.kt)("admonition",{type:"warning"},(0,n.kt)("p",{parentName:"admonition"},"Will overwrite the existing file if it already exists.")),(0,n.kt)("h3",{id:"get-a-file"},"Get a file"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"use Rekalogika\\Contracts\\File\\FileRepositoryInterface;\nuse Rekalogika\\Contracts\\File\\Exception\\File\\FileNotFoundException;\nuse Rekalogika\\File\\FilePointer;\n\n/** @var FileRepositoryInterface $fileRepository */\n\n// get() will throw an exception if the file is not found\ntry {\n    $file = $fileRepository->get(new FilePointer('default', 'key'));\n} catch (FileNotFoundException $e) {\n    // File not found\n}\n\n// tryGet() will return null if the file is not found\n$file = $fileRepository->tryGet(new FilePointer('default', 'key'));\n\n// with a local file, you can also do it without using file repository:\ntry {\n    $file = new File('/path/to/file');\n} catch (FileNotFoundException $e) {\n    // File not found\n}\n")),(0,n.kt)("h3",{id:"delete-a-file"},"Delete a file"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"use Rekalogika\\Contracts\\File\\FileRepositoryInterface;\nuse Rekalogika\\File\\FilePointer;\n\n/** @var FileRepositoryInterface $fileRepository */\n\n$fileRepository->delete(new FilePointer('default', 'key'));\n")),(0,n.kt)("h3",{id:"copy-and-move-a-file"},"Copy and move a file"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"use Rekalogika\\Contracts\\File\\FileRepositoryInterface;\nuse Rekalogika\\File\\FilePointer;\n\n/** @var FileRepositoryInterface $fileRepository */\n\n$newFile = $fileRepository->copy(\n    new FilePointer('default', 'key'),\n    new FilePointer('otherfilesystem', 'destinationkey')\n);\n\n$newFile = $fileRepository->move(\n    new FilePointer('default', 'key'),\n    new FilePointer('otherfilesystem', 'destinationkey')\n);\n")),(0,n.kt)("admonition",{type:"tip"},(0,n.kt)("p",{parentName:"admonition"},"You can also use a ",(0,n.kt)("inlineCode",{parentName:"p"},"FileInterface")," as the origin or the destination\nof the move or copy operation.")),(0,n.kt)("h3",{id:"create-a-temporary-file"},"Create a temporary file"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"use Rekalogika\\Contracts\\File\\FileRepositoryInterface;\n\n/** @var FileRepositoryInterface $fileRepository */\n\n$file = $fileRepository->createTemporaryFile();\n")),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"A temporary file will be automatically deleted if the ",(0,n.kt)("inlineCode",{parentName:"p"},"$file")," object\nis unset or falls out of scope.")),(0,n.kt)("h2",{id:"working-with-a-file"},"Working With a File"),(0,n.kt)("h3",{id:"reading-the-files-content"},"Reading the file's content"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"use Rekalogika\\Contracts\\File\\FileInterface;\n\n/** @var FileInterface $file */\n\n// as a string\n$string = $file->getContent();\n\n// as a stream\n$stream = $file->getContentAsStream();\n\n// the stream is an instance of StreamInterface, to get a resource, use detach()\n$resource = $stream->detach();\n")),(0,n.kt)("h3",{id:"writing-to-the-file-replacing-its-content"},"Writing to the file, replacing its content"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"use Rekalogika\\Contracts\\File\\FileInterface;\n\n/** @var FileInterface $file */\n\n// from a string\n$file->setContent('Hello World!');\n\n// from a stream or resource\n$file->setContentFromStream($resource);\n")),(0,n.kt)("h3",{id:"renaming-the-file"},"Renaming the file"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"use Rekalogika\\Contracts\\File\\FileInterface;\n\n/** @var FileInterface $file */\n\n$file->setName('my-photo.jpg');\n\n// if you omit the extension, the library will automatically choose the correct\n// extension based on the file's MIME type\n\n$file->setName('my-photo');\n$name = (string) $file->getName(); // my-photo.jpg\n\n// if you absolutely don't want an extension, you can set it directly to the\n// metadata\n\n$file->get(FileMetadataInterface::class)->setFileName('my-photo');\n$file->flush();\n\n// getName() returns FileNameInterface that provides several convenient methods\n// to get information about the filename\n\n$file->setName('foo.png');\n\n$name = (string) $file->getName(); // foo.png\n$fullName = $file->getName()->getFull(); // foo.png\n$baseName = $file->getName()->getBase(); // foo\n$extension = $file->getName()->getExtension(); // png\n$hasExtension = $file->getName()->hasExtension(); // true\n")),(0,n.kt)("h3",{id:"saving-to-a-local-file"},"Saving to a local file"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"use Rekalogika\\Contracts\\File\\FileInterface;\n\n/** @var FileInterface $file */\n\n// saves the file to /tmp/foo.txt\n$localFile = $file->saveToLocalFile('/tmp/foo.txt'); \n\n// saves the file to a temporary file\n$temporaryFile = $file->createLocalTemporaryFile();\n")),(0,n.kt)("h3",{id:"media-type-mime-type-handling"},"Media type (MIME type) handling"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"use Rekalogika\\Contracts\\File\\FileInterface;\n\n/** @var FileInterface $file */\n\n// usually not necessary as the framework will automatically detect media type\n$file->setMediaType('image/jpeg'); // sets the media type to image/jpeg\n\n$mediaType = (string) $file->getType(); // image/jpeg\n$mediaType = $file->getType()->getName(); // image/jpeg\n$mediaType = $file->getType()->getType(); // image\n$mediaType = $file->getType()->getSubType(); // jpeg\n$mediaType = $file->getType()->getCommonExtensions(); // ['jpg', 'jpeg', 'jpe']\n$mediaType = $file->getType()->getExtension(); // jpg\n$mediaType = (string) $file->getType()->getDescription(); // JPEG image\n")),(0,n.kt)("h3",{id:"file-size--last-modified-time"},"File size & last modified time"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"use Rekalogika\\Contracts\\File\\FileInterface;\n\n/** @var FileInterface $file */\n\n// main metadata\n$size = $file->getSize(); // file size in bytes\n$lastModified = $file->getLastModified(); // last modified time\n")),(0,n.kt)("h3",{id:"image-metadata"},"Image metadata"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"use Rekalogika\\Contracts\\File\\FileInterface;\nuse Rekalogika\\Contracts\\File\\Metadata\\ImageMetadataInterface;\n\n/** @var FileInterface $file */\n\n$width = $file->get(ImageMetadataInterface::class)?->getWidth(); \n$height = $file->get(ImageMetadataInterface::class)?->getHeight(); \n\n// you can also do the following, useful when specifying FQCNs is unwieldy, like\n// in Twig templates\n\n$width = $file->get('imageMetadata')?->getWidth(); \n$height = $file->get('imageMetadata')?->getHeight(); \n")),(0,n.kt)("h3",{id:"http-metadata"},"HTTP metadata"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"use Rekalogika\\Contracts\\File\\FileInterface;\nuse Rekalogika\\Contracts\\File\\Metadata\\HttpMetadataInterface;\n\n/** @var FileInterface $file */\n\n// Setting the disposition value, will be used in the Content-Disposition header\n// when the file is downloaded\n$file->get(HttpMetadataInterface::class)?->setDisposition('attachment'); \n$file->flush();\n\n// Getting all the HTTP headers that will be used when the file is downloaded\n$httpHeaders = $file->get(HttpMetadataInterface::class)?->getHeaders(); \n")),(0,n.kt)("h3",{id:"flushing-metadata"},"Flushing metadata"),(0,n.kt)("p",null,"Updating metadata using a high-level method (those on ",(0,n.kt)("inlineCode",{parentName:"p"},"FileInterface"),") will be\nsaved automatically. But using a low-level method (under\n",(0,n.kt)("inlineCode",{parentName:"p"},"FileInterface::get()"),"), you have to call ",(0,n.kt)("inlineCode",{parentName:"p"},"flush()")," manually. You can take\nadvantage of this so that multiple metadata updates are saved in a single round\ntrip."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"use Rekalogika\\Contracts\\File\\FileInterface;\nuse Rekalogika\\Contracts\\File\\Metadata\\HttpMetadataInterface;\n\n/** @var FileInterface $file */\n\n// each of the following will be saved automatically, and will require two\n// roundtrips to the storage backend\n$file->setMediaType('image/jpeg');\n$file->setName('foo.jpg');\n\n// needs a flush()\n$file->get(HttpMetadataInterface::class)?->setDisposition('attachment'); \n$file->flush();\n")),(0,n.kt)("h3",{id:"file-pointer--comparison"},"File Pointer & comparison"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-php"},"use Rekalogika\\Contracts\\File\\FileInterface;\n\n/** @var FileInterface $file */\n\n// get pointer from a FileInterface\n$filePointer = $file->getPointer();\n\n// determine if two File/FilePointer objects point to the same file\n$isEqual = $filePointer->isEqualTo($file);\n$isEqual = $file->isEqualTo($filePointer);\n$isEqual = $file1->isEqualTo($file2);\n$isEqual = $filePointer1->isEqualTo($filePointer2);\n")))}m.isMDXComponent=!0}}]);