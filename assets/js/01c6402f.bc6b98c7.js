"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[634],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var l=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,l,i=function(e,t){if(null==e)return{};var n,l,i={},a=Object.keys(e);for(l=0;l<a.length;l++)n=a[l],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(l=0;l<a.length;l++)n=a[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=l.createContext({}),u=function(e){var t=l.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=u(e.components);return l.createElement(s.Provider,{value:t},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},d=l.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=u(n),d=i,h=p["".concat(s,".").concat(d)]||p[d]||f[d]||a;return n?l.createElement(h,r(r({ref:t},c),{},{components:n})):l.createElement(h,r({ref:t},c))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,r=new Array(a);r[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:i,r[1]=o;for(var u=2;u<a;u++)r[u]=n[u];return l.createElement.apply(null,r)}return l.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1860:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>f,frontMatter:()=>a,metadata:()=>o,toc:()=>u});var l=n(7462),i=(n(7294),n(3905));const a={title:"Null File"},r=void 0,o={unversionedId:"file/null-file",id:"file/null-file",title:"Null File",description:"This chapter describes the null object pattern applied to files.",source:"@site/docs/file/08-null-file.md",sourceDirName:"file",slug:"/file/null-file",permalink:"/file/null-file",draft:!1,editUrl:"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/file/08-null-file.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{title:"Null File"},sidebar:"docs",previous:{title:"Lazy-Loading Proxy",permalink:"/file/proxy"},next:{title:"rekalogika/file-bundle",permalink:"/file-bundle/"}},s={},u=[{value:"The Missing File Problem",id:"the-missing-file-problem",level:2},{value:"Solution: Use a <code>NullFile</code> Object",id:"solution-use-a-nullfile-object",level:2},{value:"Usage",id:"usage",level:2},{value:"Checking for a Null File",id:"checking-for-a-null-file",level:2},{value:"<code>InvalidFile</code>: a Null File That is Also an Exception",id:"invalidfile-a-null-file-that-is-also-an-exception",level:2}],c={toc:u},p="wrapper";function f(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,l.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This chapter describes the null object pattern applied to files."),(0,i.kt)("h2",{id:"the-missing-file-problem"},"The Missing File Problem"),(0,i.kt)("p",null,"One of the most common problems when working with files is how to handle the\ncase when the business logic necessitates that a file must be present, but in\nactuality, it is not. For example, if an image has been assigned to a product in\nthe past, the product has a record of it and knows that it has an image. But in\nthe storage, the image is missing for some reason."),(0,i.kt)("p",null,"We can use a standard null value, but by doing so, we will have to check for\nnull every time we want to use the file, as well as do the branching logic\neverywhere. This is tedious and error-prone. Such cases also rarely happen, and\ntherefore the handling logic will also be rarely tested. When it happens, it\noften results in a fatal error, which is not a good user experience."),(0,i.kt)("h2",{id:"solution-use-a-nullfile-object"},"Solution: Use a ",(0,i.kt)("inlineCode",{parentName:"h2"},"NullFile")," Object"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"NullFile")," is a ",(0,i.kt)("a",{parentName:"p",href:"https://martinfowler.com/eaaCatalog/specialCase.html"},"null object\npattern")," implementation\nfor files. It is a ",(0,i.kt)("inlineCode",{parentName:"p"},"FileInterface")," that represents the missing file. It appears\nlike a real file to the caller and can be considered a real file by most parts\nof the code."),(0,i.kt)("p",null,"Instead of a fatal error, your user will now be able to see if there is a file,\nbut something is wrong with it, and will be able to tell the admin about it. The\nadmin will be able to act on it, for example, by re-uploading the file or\nrestoring it from backup."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"NullFile")," does that without much effort from the developer."),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"NullFile")," will only stop acting like a real file if the caller is trying to\noperate on it that would cause a side effect. For example, you will not be able\nto copy a ",(0,i.kt)("inlineCode",{parentName:"p"},"NullFile")," to another location, to change its content, etc. If that\nhappens, ",(0,i.kt)("inlineCode",{parentName:"p"},"NullFile")," will throw a ",(0,i.kt)("inlineCode",{parentName:"p"},"NullFileOperationException"),"."),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("admonition",{title:"Preparation",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"You need to install the package ",(0,i.kt)("inlineCode",{parentName:"p"},"rekalogika/file-null")," to use this\nfeature:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"composer require rekalogika/file-null\n"))),(0,i.kt)("p",null,"An example on how to use ",(0,i.kt)("inlineCode",{parentName:"p"},"NullFile")," in your entity:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"use Rekalogika\\Contracts\\File\\FileInterface;\nuse Rekalogika\\Domain\\File\\Null\\NullFile;\n\nclass Product {\n    private ?FileInterface $image = null;\n\n    public function __construct(FileInterface $image) {\n        $this->image = $image;\n    }\n\n    // The image must never be null. So, if the image does not exist, we\n    // substitute it with a NullFile instead.\n    public function getImage(): FileInterface {\n        return $this->image ?? new NullFile();\n    }\n}\n")),(0,i.kt)("h2",{id:"checking-for-a-null-file"},"Checking for a Null File"),(0,i.kt)("p",null,"All null files implement the ",(0,i.kt)("inlineCode",{parentName:"p"},"NullFileInterface"),". You can use this interface to\ncheck if a file is null:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"use Rekalogika\\Contracts\\File\\NullFileInterface;\n\n/** @var FileInterface $file */\n\nif ($file instanceof NullFileInterface) {\n    // The file is null.\n}\n")),(0,i.kt)("h2",{id:"invalidfile-a-null-file-that-is-also-an-exception"},(0,i.kt)("inlineCode",{parentName:"h2"},"InvalidFile"),": a Null File That is Also an Exception"),(0,i.kt)("p",null,"There is also a null file called ",(0,i.kt)("inlineCode",{parentName:"p"},"InvalidFile")," which is identical to the\nstandard ",(0,i.kt)("inlineCode",{parentName:"p"},"NullFile"),", but also extends ",(0,i.kt)("inlineCode",{parentName:"p"},"Exception"),". The idea is that it contains\nthe stack trace where it was instantiated that can help you debug the problem,\nif you can log it somewhere. You can also throw it somewhere down the line if\nyou need it."),(0,i.kt)("p",null,"To log an ",(0,i.kt)("inlineCode",{parentName:"p"},"InvalidFile")," you can do something like the following."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"use Rekalogika\\Contracts\\File\\FileInterface;\nuse Psr\\Log\\LoggerInterface;\n\n/** @var FileInterface $file */\n/** @var LoggerInterface $logger */\n\nif ($file instanceof InvalidFile) {\n    $logger->error('Invalid file', [\n        'exception' => $file,\n    ]);\n}\n")))}f.isMDXComponent=!0}}]);