"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[559],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(t),d=i,h=u["".concat(s,".").concat(d)]||u[d]||m[d]||r;return t?a.createElement(h,o(o({ref:n},c),{},{components:t})):a.createElement(h,o({ref:n},c))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7417:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=t(7462),i=(t(7294),t(3905));const r={title:"Manual Control"},o=void 0,l={unversionedId:"domain-event/manual-control",id:"domain-event/manual-control",title:"Manual Control",description:"To manually manage domain events, you can use",source:"@site/docs/domain-event/02-manual-control.md",sourceDirName:"domain-event",slug:"/domain-event/manual-control",permalink:"/domain-event/manual-control",draft:!1,editUrl:"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/domain-event/02-manual-control.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Manual Control"},sidebar:"docs",previous:{title:"Basic Usage",permalink:"/domain-event/basic-usage"},next:{title:"Immediate Dispatcher Handling & Troubleshooting",permalink:"/domain-event/immediate-dispatcher"}},s={},p=[{value:"Manual Dispatching",id:"manual-dispatching",level:2},{value:"Clearing Events",id:"clearing-events",level:2},{value:"Getting the Events in the Queue",id:"getting-the-events-in-the-queue",level:2},{value:"Immediate Dispatcher Installation",id:"immediate-dispatcher-installation",level:2}],c={toc:p},u="wrapper";function m(e){let{components:n,...t}=e;return(0,i.kt)(u,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"To manually manage domain events, you can use\n",(0,i.kt)("inlineCode",{parentName:"p"},"DomainEventAwareEntityManagerInterface")," in place of the regular\n",(0,i.kt)("inlineCode",{parentName:"p"},"EntityManagerInterface"),". It adds several methods to the Entity Manager that you\ncan use to manage domain event dispatching."),(0,i.kt)("h2",{id:"manual-dispatching"},"Manual Dispatching"),(0,i.kt)("p",null,"You can disable automatic dispatching on ",(0,i.kt)("inlineCode",{parentName:"p"},"flush()")," by calling\n",(0,i.kt)("inlineCode",{parentName:"p"},"setAutoDispatchDomainEvents(false)"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"/** @var DomainEventAwareEntityManagerInterface $entityManager */\n\n$entityManager->setAutoDispatchDomainEvents(false);\n\n// ...\n\n$entityManager->dispatchPreFlushDomainEvents();\n$entityManager->flush();\n$entityManager->dispatchPostFlushDomainEvents();\n")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Immediate dispatching is dispatched outside ",(0,i.kt)("inlineCode",{parentName:"p"},"DomainEventManager")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"DomainEventAwareEntityManager"),", and therefore unaffected by\n",(0,i.kt)("inlineCode",{parentName:"p"},"setAutoDispatchDomainEvents()"),".")),(0,i.kt)("h2",{id:"clearing-events"},"Clearing Events"),(0,i.kt)("p",null,"If the domain event queues are not empty at the end of the request,\n",(0,i.kt)("inlineCode",{parentName:"p"},"DomainEventManager")," will throw ",(0,i.kt)("inlineCode",{parentName:"p"},"UndispatchedEventsException"),". To prevent that\nfrom happening, if you disable auto-dispatch, you need to make sure that you\ndispatch both pre-flush and post-flush events as above. Alternatively, you can\nclear the events if you don't want them dispatched:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"/** @var DomainEventAwareEntityManagerInterface $entityManager */\n\n$entityManager->setAutoDispatchDomainEvents(false);\n\n// ...\n\n$entityManager->flush();\n$entityManager->clearDomainEvents();\n")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"In the event of an uncaught error, the framework will automatically\nclear undispatched events using the ",(0,i.kt)("inlineCode",{parentName:"p"},"kernel.exception")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"console.error"),"\nevents, so in such cases, you don't have to handle that manually. But if you\ncatch an exception that previously caused pending events not to be dispatched,\nyou need to manually clear the events.")),(0,i.kt)("h2",{id:"getting-the-events-in-the-queue"},"Getting the Events in the Queue"),(0,i.kt)("p",null,"You can get the undispatched events in the queue by calling ",(0,i.kt)("inlineCode",{parentName:"p"},"popDomainEvents()"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"/** @var DomainEventAwareEntityManagerInterface $entityManager */\n\n$events = $entityManager->popDomainEvents();\n")),(0,i.kt)("p",null,"This can be useful if you want to dispatch the events in another process, or\nstore them in a database, etc."),(0,i.kt)("h2",{id:"immediate-dispatcher-installation"},"Immediate Dispatcher Installation"),(0,i.kt)("p",null,"Immediate event dispatcher works by installing the event dispatcher to a static\nvariable. This installation happens on several opportunities:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"In these events: ",(0,i.kt)("inlineCode",{parentName:"li"},"kernel.request")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"console.command"),"."),(0,i.kt)("li",{parentName:"ul"},"During the initialization of ",(0,i.kt)("inlineCode",{parentName:"li"},"ManagerRegistry"),"."),(0,i.kt)("li",{parentName:"ul"},"During the initialization of an ",(0,i.kt)("inlineCode",{parentName:"li"},"EntityManagerInterface"),".")),(0,i.kt)("p",null,"When any of these don't occur, there is no opportunity to install the event\ndispatcher. This usually happens only in isolated unit tests. To fix the\nproblem, you can install a stub event dispatcher manually like the following."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"use PHPUnit\\Framework\\TestCase;\nuse Rekalogika\\DomainEvent\\ImmediateDomainEventDispatcherInstaller;\nuse Symfony\\Component\\EventDispatcher\\EventDispatcher;\n\nclass SomeTest extends TestCase\n{\n    public function setUp(): void\n    {\n        $installer = new ImmediateDomainEventDispatcherInstaller(new EventDispatcher);\n        $installer->install();\n\n    }\n\n    // ...\n}\n")),(0,i.kt)("p",null,"In integration tests where you have access to the service container, but the\ntests don't involve ",(0,i.kt)("inlineCode",{parentName:"p"},"EntityManager")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"ManagerRegistry"),", you can pull the\ninstaller from the container to install the immediate dispatcher:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"use Rekalogika\\DomainEvent\\ImmediateDomainEventDispatcherInstaller;\nuse Symfony\\Bundle\\FrameworkBundle\\Test\\KernelTestCase;\n\nclass SomeTest extends KernelTestCase\n{\n    public function setUp(): void\n    {\n        self::bootKernel();\n        static::getContainer()\n          ->get(ImmediateDomainEventDispatcherInstaller::class)->install();\n    }\n\n    // ...\n}\n")))}m.isMDXComponent=!0}}]);