"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[181],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),f=o,m=p["".concat(s,".").concat(f)]||p[f]||d[f]||i;return n?r.createElement(m,a(a({ref:t},u),{},{components:n})):r.createElement(m,a({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},8390:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const i={title:"Object ID Resolver"},a=void 0,l={unversionedId:"file-bundle/object-id-resolver",id:"file-bundle/object-id-resolver",title:"Object ID Resolver",description:"An object ID resolver takes an object and returns its ID. The framework uses an",source:"@site/docs/file-bundle/23-object-id-resolver.md",sourceDirName:"file-bundle",slug:"/file-bundle/object-id-resolver",permalink:"/file-bundle/object-id-resolver",draft:!1,editUrl:"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/file-bundle/23-object-id-resolver.md",tags:[],version:"current",sidebarPosition:23,frontMatter:{title:"Object ID Resolver"},sidebar:"docs",previous:{title:"Creating Filters",permalink:"/file-bundle/creating-filters"},next:{title:"Marking Entities using Interface",permalink:"/file-bundle/file-association-interface"}},s={},c=[{value:"Creating An Object ID Resolver",id:"creating-an-object-id-resolver",level:2}],u={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"An object ID resolver takes an object and returns its ID. The framework uses an\nobject ID resolver as one of the parameters used to determine where to store the\nfile."),(0,o.kt)("p",null,"There are two built-in ID resolvers in the framework:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"DoctrineObjectIdResolver"),": Uses Doctrine's ",(0,o.kt)("inlineCode",{parentName:"li"},"ClassMetadata")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"UnitOfWork"),"\nto determine the ID of the entity."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"DefaultObjectIdResolver"),": Calls the method ",(0,o.kt)("inlineCode",{parentName:"li"},"getId()")," on the object.")),(0,o.kt)("admonition",{title:"Protip",type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"You can have multiple implementations of ",(0,o.kt)("inlineCode",{parentName:"p"},"ObjectIdResolverInterface")," in your\napplication. The framework will use the first one that returns a value.")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"If you have a custom implementation of ",(0,o.kt)("inlineCode",{parentName:"p"},"ObjectIdResolverInterface"),", the default\nresolvers are still active but have a lower priority than your custom\nimplementation.")),(0,o.kt)("h2",{id:"creating-an-object-id-resolver"},"Creating An Object ID Resolver"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"use Rekalogika\\Contracts\\File\\Association\\ObjectIdResolverInterface;\n\nclass MyObjectIdResolver implements ObjectIdResolverInterface\n{\n    public function getObjectId(object $object): string\n    {\n        // your implementation here\n    }\n}\n")),(0,o.kt)("p",null,"If you are using autoconfiguration, then it is all set. If not, you need to\nregister your class in the service container:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"title=config/services.yaml",title:"config/services.yaml"},"services:\n    App\\MyObjectIdResolver:\n        tags:\n            - { name: 'rekalogika.file.association.object_id_resolver' }\n")))}d.isMDXComponent=!0}}]);