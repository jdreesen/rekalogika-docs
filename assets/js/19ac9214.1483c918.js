"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9471],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>k});var l=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function n(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,l)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?n(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,l,r=function(e,t){if(null==e)return{};var a,l,r={},n=Object.keys(e);for(l=0;l<n.length;l++)a=n[l],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(l=0;l<n.length;l++)a=n[l],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=l.createContext({}),s=function(e){var t=l.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=s(e.components);return l.createElement(c.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},u=l.forwardRef((function(e,t){var a=e.components,r=e.mdxType,n=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=s(a),u=r,k=d["".concat(c,".").concat(u)]||d[u]||m[u]||n;return a?l.createElement(k,o(o({ref:t},p),{},{components:a})):l.createElement(k,o({ref:t},p))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var n=a.length,o=new Array(n);o[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[d]="string"==typeof e?e:r,o[1]=i;for(var s=2;s<n;s++)o[s]=a[s];return l.createElement.apply(null,o)}return l.createElement.apply(null,a)}u.displayName="MDXCreateElement"},687:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>n,metadata:()=>i,toc:()=>s});var l=a(7462),r=(a(7294),a(3905));const n={title:"Decorator Classes and Traits"},o=void 0,i={unversionedId:"doctrine-collections-decorator/classes",id:"doctrine-collections-decorator/classes",title:"Decorator Classes and Traits",description:"This chapter will describe all the available classes and traits in this package.",source:"@site/docs/doctrine-collections-decorator/03-classes.md",sourceDirName:"doctrine-collections-decorator",slug:"/doctrine-collections-decorator/classes",permalink:"/doctrine-collections-decorator/classes",draft:!1,editUrl:"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/doctrine-collections-decorator/03-classes.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Decorator Classes and Traits"},sidebar:"docs",previous:{title:"Class Diagram",permalink:"/doctrine-collections-decorator/class-diagram"},next:{title:"Type Safety",permalink:"/doctrine-collections-decorator/cookbook/type-safety"}},c={},s=[{value:"Decorator Classes",id:"decorator-classes",level:2},{value:"Abstract Decorator Classes",id:"abstract-decorator-classes",level:2},{value:"Decorator Traits",id:"decorator-traits",level:2},{value:"Convenience Trait",id:"convenience-trait",level:2}],p={toc:s},d="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(d,(0,l.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This chapter will describe all the available classes and traits in this package."),(0,r.kt)("h2",{id:"decorator-classes"},"Decorator Classes"),(0,r.kt)("p",null,"All of our classes come in four flavors:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Those that implement ",(0,r.kt)("inlineCode",{parentName:"li"},"Collection")),(0,r.kt)("li",{parentName:"ul"},"Those that implement ",(0,r.kt)("inlineCode",{parentName:"li"},"ReadableCollection")),(0,r.kt)("li",{parentName:"ul"},"Those that implement ",(0,r.kt)("inlineCode",{parentName:"li"},"Collection")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"Selectable")),(0,r.kt)("li",{parentName:"ul"},"Those that implement ",(0,r.kt)("inlineCode",{parentName:"li"},"ReadableCollection")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"Selectable"))),(0,r.kt)("p",null,"Most people probably want to use one of the high-level decorator classes as a\nbase. These will simply forward all method calls to the wrapped collection:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"CollectionDecorator")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ReadableCollectionDecorator")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"SelectableCollectionDecorator")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"SelectableReadableCollectionDecorator"))),(0,r.kt)("p",null,"Also available the 'reject' decorator classes, which will throw an exception\nwhen any of the methods is called:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"CollectionRejectDecorator")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ReadableCollectionRejectDecorator")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"SelectableCollectionRejectDecorator")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"SelectableReadableCollectionRejectDecorator"))),(0,r.kt)("h2",{id:"abstract-decorator-classes"},"Abstract Decorator Classes"),(0,r.kt)("p",null,"Also available are abstract classes for ",(0,r.kt)("inlineCode",{parentName:"p"},"Collection")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"ReadableCollection"),",\nwith and without ",(0,r.kt)("inlineCode",{parentName:"p"},"Selectable"),", if you prefer a slightly low-level approach:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"AbstractCollectionDecorator")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"AbstractReadableCollectionDecorator")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"AbstractSelectableCollectionDecorator")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"AbstractSelectableReadableCollectionDecorator"))),(0,r.kt)("p",null,"And the 'reject' flavors:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"AbstractCollectionRejectDecorator")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"AbstractReadableCollectionRejectDecorator")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"AbstractSelectableCollectionRejectDecorator")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"AbstractSelectableReadableCollectionRejectDecorator"))),(0,r.kt)("h2",{id:"decorator-traits"},"Decorator Traits"),(0,r.kt)("p",null,"There are traits for each of the involved interfaces:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ArrayAccessDecoratorTrait")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"IteratorAggregateDecoratorTrait")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"CountableDecoratorTrait")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ReadableCollectionDecoratorTrait")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"CollectionDecoratorTrait")," "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"SelectableDecoratorTrait"))),(0,r.kt)("p",null,"And the 'reject' traits that will throw ",(0,r.kt)("inlineCode",{parentName:"p"},"BadMethodCallException")," when any of the\nmethods is called."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ArrayAccessRejectDecoratorTrait")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"IteratorAggregateRejectDecoratorTrait")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"CountableRejectDecoratorTrait")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ReadableCollectionRejectDecoratorTrait")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"CollectionRejectDecoratorTrait")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"SelectableRejectDecoratorTrait"))),(0,r.kt)("p",null,"All traits require the method ",(0,r.kt)("inlineCode",{parentName:"p"},"getWrapped()")," which returns the wrapped\ncollection."),(0,r.kt)("h2",{id:"convenience-trait"},"Convenience Trait"),(0,r.kt)("p",null,"There is one convenience trait ",(0,r.kt)("inlineCode",{parentName:"p"},"ArrayAccessDecoratorDxTrait")," which forwards\n",(0,r.kt)("inlineCode",{parentName:"p"},"ArrayAccess")," methods not to the wrapped collection, but to other methods of the\ndecorator."),(0,r.kt)("p",null,"The idea is that you only need to override ",(0,r.kt)("inlineCode",{parentName:"p"},"containsKey()"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"get()"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"set()"),",\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"remove()"),"; and the methods ",(0,r.kt)("inlineCode",{parentName:"p"},"offsetExists()"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"offsetGet()"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"offsetSet()"),",\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"offsetUnset()")," will forward calls to the aforementioned methods."))}m.isMDXComponent=!0}}]);