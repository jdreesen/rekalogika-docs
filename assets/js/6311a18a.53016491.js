"use strict";(self.webpackChunkrekalogika_docs=self.webpackChunkrekalogika_docs||[]).push([[1929],{5218:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var n=t(5893),o=t(1151);const a={title:"Overriding Transformer"},s=void 0,i={id:"mapper/overriding-transformer",title:"Overriding Transformer",description:"If the mapper chooses the wrong transformer for the job, you can override it by",source:"@site/docs/mapper/13-overriding-transformer.md",sourceDirName:"mapper",slug:"/mapper/overriding-transformer",permalink:"/mapper/overriding-transformer",draft:!1,unlisted:!1,editUrl:"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/mapper/13-overriding-transformer.md",tags:[],version:"current",sidebarPosition:13,frontMatter:{title:"Overriding Transformer"},sidebar:"docs",previous:{title:"Creating a Custom Transformer",permalink:"/mapper/creating-transformer"},next:{title:"Manual Mapping using a Class Method",permalink:"/mapper/method-mapper"}},c={},p=[];function d(e){const r={code:"code",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.p,{children:"If the mapper chooses the wrong transformer for the job, you can override it by\ndecorating the correct transformer and adding it to the mapping table."}),"\n",(0,n.jsxs)(r.p,{children:["Suppose you have a ",(0,n.jsx)(r.code,{children:"YourObject"})," class and a ",(0,n.jsx)(r.code,{children:"YourObjectDto"})," class, but the\nmapper does not use the desired transformer for the job. You can fix it by\ndecorating the correct transformer like this:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-php",children:"use Rekalogika\\Mapper\\Transformer\\AbstractTransformerDecorator;\nuse Rekalogika\\Mapper\\Transformer\\ObjectToObjectTransformer;\nuse Rekalogika\\Mapper\\Transformer\\Contracts\\TypeMapping;\nuse Rekalogika\\Mapper\\Util\\TypeFactory;\n\nclass OverrideTransformer extends AbstractTransformerDecorator\n{\n    public function __construct(ObjectToObjectTransformer $transformer)\n    {\n        parent::__construct($transformer);\n    }\n\n    public function getSupportedTransformation(): iterable\n    {\n        yield new TypeMapping(\n            TypeFactory::objectOfClass(YourObject::class),\n            TypeFactory::objectOfClass(YourObjectDto::class),\n        );\n    }\n}\n"})}),"\n",(0,n.jsxs)(r.p,{children:["With the above example, when the source is ",(0,n.jsx)(r.code,{children:"YourObject"})," and the target is\n",(0,n.jsx)(r.code,{children:"YourObjectDto"}),", the mapper will now choose ",(0,n.jsx)(r.code,{children:"ObjectToObjectTransformer"})," instead\nof choosing from the rest of the mapping table."]})]})}function m(e={}){const{wrapper:r}={...(0,o.a)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},1151:(e,r,t)=>{t.d(r,{Z:()=>i,a:()=>s});var n=t(7294);const o={},a=n.createContext(o);function s(e){const r=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),n.createElement(a.Provider,{value:r},e.children)}}}]);