"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[695],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},h="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),h=c(n),u=r,d=h["".concat(s,".").concat(u)]||h[u]||f[u]||a;return n?i.createElement(d,o(o({ref:t},p),{},{components:n})):i.createElement(d,o({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[h]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<a;c++)o[c]=n[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},791:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>f,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var i=n(7462),r=(n(7294),n(3905));const a={title:"File Association Internal Details"},o=void 0,l={unversionedId:"file/entity-association-internal",id:"file/entity-association-internal",title:"File Association Internal Details",description:"Where The Files Are Stored",source:"@site/docs/file/52-entity-association-internal.md",sourceDirName:"file",slug:"/file/entity-association-internal",permalink:"/file/entity-association-internal",draft:!1,editUrl:"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/file/52-entity-association-internal.md",tags:[],version:"current",sidebarPosition:52,frontMatter:{title:"File Association Internal Details"},sidebar:"docs",previous:{title:"Creating Filters",permalink:"/file/creating-filters"},next:{title:"Miscellaneous",permalink:"/file/misc"}},s={},c=[{value:"Where The Files Are Stored",id:"where-the-files-are-stored",level:2},{value:"About File Names",id:"about-file-names",level:2},{value:"How It Works",id:"how-it-works",level:2},{value:"Architecture",id:"architecture",level:2}],p={toc:c},h="wrapper";function f(e){let{components:t,...n}=e;return(0,r.kt)(h,(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"where-the-files-are-stored"},"Where The Files Are Stored"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"FileLocationResolverInterface")," decides where to store the file. It takes the\nentity instance and the name of the property holding the file, and outputs a\n",(0,r.kt)("inlineCode",{parentName:"p"},"FilePointer")," describing where the file in that property will be stored. The\ndefault implementation ",(0,r.kt)("inlineCode",{parentName:"p"},"DefaultFileLocationResolver")," stores files into the\nfilesystem with the identifier 'default' and the key similar to the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"entity/ffa87ef3fc5388bc8b666e2cec17d27cc493d0c1/image/e5/80/72/6d/31337\n\u2570----\u256f \u2570--------------------------------------\u256f \u2570---\u256f \u2570---------\u256f \u2570---\u256f\n  A                      B                        C        D        E\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A: Prefix, defaults to 'entity'."),(0,r.kt)("li",{parentName:"ul"},"B: SHA-1 hash of the entity's fully-qualified class name."),(0,r.kt)("li",{parentName:"ul"},"C: Property name."),(0,r.kt)("li",{parentName:"ul"},"D: Hashed directories of the entity's ID. The ID is hashed using SHA-1, then\nsplitted by 2 characters each. Then, the first four of them are taken to form\nthe directory structure."),(0,r.kt)("li",{parentName:"ul"},"E: The entity ID.")),(0,r.kt)("p",null,"This default should be sufficient in most cases, for all entities, and all\nfilesystems. It masks internal details (entity class names). It does not pile\ntoo many files in one directory (some filesystems struggle with huge amount of\nfiles in a directory). The ordering is chosen to make it easier for manual\nadministration tasks."),(0,r.kt)("p",null,"To obtain the entity's ID, ",(0,r.kt)("inlineCode",{parentName:"p"},"DefaultFileLocationResolver")," calls\n",(0,r.kt)("inlineCode",{parentName:"p"},"ObjectIdResolverInterface"),". By default, it is ",(0,r.kt)("inlineCode",{parentName:"p"},"DefaultObjectIdResolver")," which\ncalls ",(0,r.kt)("inlineCode",{parentName:"p"},"getId()")," of the entity."),(0,r.kt)("p",null,"To override this default behavior, you can create your own implementation of\neither ",(0,r.kt)("inlineCode",{parentName:"p"},"FileLocationResolverInterface")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"ObjectIdResolverInterface"),". If you\nare using autoconfiguration, then you are good to go. Otherwise, you need to\ntag them in the service container:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"services:\n    App\\MyFileLocationResolver:\n        tags:\n            - { name: 'rekalogika.file.association.file_location_resolver' }\n    App\\MyObjectIdResolver:\n        tags:\n            - { name: 'rekalogika.file.association.object_id_resolver' }\n")),(0,r.kt)("h2",{id:"about-file-names"},"About File Names"),(0,r.kt)("p",null,"Like modern key-value cloud storage services, this framework uses the concept of\n'keys', not 'paths'. The file name is not part of the key, but stored in the\nmetadata, along with other properties of the file. The original file name is\nnever taken into consideration when determining where to store the file."),(0,r.kt)("p",null,"The metadata itself is stored in a sidecar file. Using the example above, the\nmetadata will be stored in this location:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"entity/ffa87ef3fc5388bc8b666e2cec17d27cc493d0c1/image/e5/80/72/6d/31337.metadata\n")),(0,r.kt)("p",null,"The caller can obtain the file name using the appropriate methods:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$imageFilename = $entity->getImage()?->getName();\n")),(0,r.kt)("p",null,"When possible, the framework should have copied the file name of the original\nfile to the destination metadata when the file was first associated with the\nentity."),(0,r.kt)("h2",{id:"how-it-works"},"How It Works"),(0,r.kt)("p",null,"The storage key of the file is deterministic. It is determined only by the\nobject's class name, the object's ID and the name of the property containing the\nfile. As long as those don't change, the key will remain the same."),(0,r.kt)("p",null,"When persisting an entity, the framework will calculate the destination storage\nkey of every applicable property of the entity, and compare it to the current\nfile residing on each property:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If both are the same, the framework leaves it alone."),(0,r.kt)("li",{parentName:"ul"},"If they are different, the framework will copy the file from the entity to the\nstorage destination."),(0,r.kt)("li",{parentName:"ul"},"If null, the framework will attempt to remove the file from the storage,\nirrespective of whether the file exists or not.")),(0,r.kt)("h2",{id:"architecture"},"Architecture"),(0,r.kt)("p",null,"In a nutshell: Doctrine Unit Of Work \u27a1\ufe0f Doctrine Events \u27a1\ufe0f\nrekalogika/reconstitutor \u27a1\ufe0f ",(0,r.kt)("inlineCode",{parentName:"p"},"InterfaceReconstitutor")," & ",(0,r.kt)("inlineCode",{parentName:"p"},"AttributeReconstitutor"),"\n\u27a1\ufe0f ",(0,r.kt)("inlineCode",{parentName:"p"},"FileAssociationManager")," \u27a1\ufe0f ",(0,r.kt)("inlineCode",{parentName:"p"},"FileRepository")," (from rekalogika/file)."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"InterfaceReconstitutor")," & ",(0,r.kt)("inlineCode",{parentName:"p"},"AttributeReconstitutor")," are the entry points of this\npackage. They execute methods of ",(0,r.kt)("inlineCode",{parentName:"p"},"FileAssociationManager")," which work with the\nentities and ",(0,r.kt)("inlineCode",{parentName:"p"},"FileRepository")," to manage the association between the entities and\nfiles."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"InterfaceReconstitutor")," & ",(0,r.kt)("inlineCode",{parentName:"p"},"AttributeReconstitutor")," are registered to the\nservice container so that they are called by our ",(0,r.kt)("inlineCode",{parentName:"p"},"rekalogika/reconstitutor")," when\nthe relevant events are being emitted by Doctrine. The service configuration is\ndone by the package ",(0,r.kt)("inlineCode",{parentName:"p"},"rekalogika/file-bundle"),"."))}f.isMDXComponent=!0}}]);