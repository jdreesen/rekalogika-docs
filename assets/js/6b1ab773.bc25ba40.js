"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4205],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var o=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,i=function(e,n){if(null==e)return{};var t,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=o.createContext({}),s=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=s(e.components);return o.createElement(c.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},h=o.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(t),h=i,m=d["".concat(c,".").concat(h)]||d[h]||u[h]||a;return t?o.createElement(m,r(r({ref:n},p),{},{components:t})):o.createElement(m,r({ref:n},p))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,r=new Array(a);r[0]=h;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[d]="string"==typeof e?e:i,r[1]=l;for(var s=2;s<a;s++)r[s]=t[s];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}h.displayName="MDXCreateElement"},678:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var o=t(7462),i=(t(7294),t(3905));const a={title:"Lazy Chained Matching"},r=void 0,l={unversionedId:"doctrine-collections-decorator/cookbook/lazy-chained-matching",id:"doctrine-collections-decorator/cookbook/lazy-chained-matching",title:"Lazy Chained Matching",description:"If you call matching() on a PersistentCollection, it will return an",source:"@site/docs/doctrine-collections-decorator/cookbook/16-lazy-chained-matching.md",sourceDirName:"doctrine-collections-decorator/cookbook",slug:"/doctrine-collections-decorator/cookbook/lazy-chained-matching",permalink:"/doctrine-collections-decorator/cookbook/lazy-chained-matching",draft:!1,editUrl:"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/doctrine-collections-decorator/cookbook/16-lazy-chained-matching.md",tags:[],version:"current",sidebarPosition:16,frontMatter:{title:"Lazy Chained Matching"},sidebar:"docs",previous:{title:"Loading Prevention in Extra Lazy Collections",permalink:"/doctrine-collections-decorator/cookbook/extra-lazy-load-prevention"},next:{title:"rekalogika/domain-event",permalink:"/domain-event/"}},c={},s=[{value:"The Decorator Class",id:"the-decorator-class",level:2},{value:"Usage Example in Entities",id:"usage-example-in-entities",level:2},{value:"The Caller Side",id:"the-caller-side",level:2}],p={toc:s},d="wrapper";function u(e){let{components:n,...t}=e;return(0,i.kt)(d,(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"If you call ",(0,i.kt)("inlineCode",{parentName:"p"},"matching()")," on a ",(0,i.kt)("inlineCode",{parentName:"p"},"PersistentCollection"),", it will return an\n",(0,i.kt)("inlineCode",{parentName:"p"},"ArrayCollection"),". So if you call ",(0,i.kt)("inlineCode",{parentName:"p"},"matching()")," again on the result, it will do\nthe processing in memory."),(0,i.kt)("p",null,"With ",(0,i.kt)("inlineCode",{parentName:"p"},"EXTRA_LAZY"),", the first ",(0,i.kt)("inlineCode",{parentName:"p"},"matching()")," will return a\n",(0,i.kt)("inlineCode",{parentName:"p"},"LazyCriteriaCollection"),". The second ",(0,i.kt)("inlineCode",{parentName:"p"},"matching()")," will return an\n",(0,i.kt)("inlineCode",{parentName:"p"},"ArrayCollection"),". Subsequent ",(0,i.kt)("inlineCode",{parentName:"p"},"matching()")," be done in memory."),(0,i.kt)("p",null,"We can decorate the collection so that chained-",(0,i.kt)("inlineCode",{parentName:"p"},"matching()")," will be done lazily,\nand all the criteria in the chain of ",(0,i.kt)("inlineCode",{parentName:"p"},"matching()")," will be merged. The actual\n",(0,i.kt)("inlineCode",{parentName:"p"},"matching()")," query will be delayed until the caller calls a method that requires\nthe result."),(0,i.kt)("h2",{id:"the-decorator-class"},"The Decorator Class"),(0,i.kt)("p",null,"This package already comes with ",(0,i.kt)("inlineCode",{parentName:"p"},"LazyMatchingCollection")," that you can use for\nthis purpose."),(0,i.kt)("h2",{id:"usage-example-in-entities"},"Usage Example in Entities"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"use Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Rekalogika\\Collections\\Decorator\\LazyMatching\\LazyMatchingCollection;\n\n#[ORM\\Entity()]\nclass BookShelf\n{\n    #[ORM\\OneToMany(targetEntity: Book::class, fetch: 'EXTRA_LAZY', indexBy: 'id')]\n    private Collection $books;\n\n    public function __construct()\n    {\n        $this->books = new ArrayCollection();\n    }\n\n    /**\n     * @return Collection<array-key,Book>&Selectable<array-key,Book>\n     */\n    public function getBooks(): Collection&Selectable\n    {\n        return new LazyMatchingCollection($this->books);\n    }\n\n    public function getScienceBook(): Collection\n    {\n        return $this->getBooks()->matching(\n            Criteria::create()\n                ->where(Criteria::expr()->eq('genre', 'science'))\n        );\n    }\n\n    public function getOldScienceBook(): Collection\n    {\n        return $this->getScienceBook()->matching(\n            Criteria::create()\n                ->where(Criteria::expr()->lt('publishedAt', new \\DateTime('-10 years')))\n        );\n    }\n}\n")),(0,i.kt)("h2",{id:"the-caller-side"},"The Caller Side"),(0,i.kt)("p",null,"Then the caller will be able to do something like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$bookShelf = $entityManager->find(BookShelf::class, 1);\n\n$oldScienceBook = $bookShelf->getOldScienceBook();\n\nforeach ($oldScienceBook as $book) {\n    echo $book->getTitle();\n}\n")),(0,i.kt)("p",null,"Nothing will be loaded from the database until the ",(0,i.kt)("inlineCode",{parentName:"p"},"foreach"),". We can also safely\nuse the result in something like ",(0,i.kt)("inlineCode",{parentName:"p"},"PagerFanta"),"."))}u.isMDXComponent=!0}}]);