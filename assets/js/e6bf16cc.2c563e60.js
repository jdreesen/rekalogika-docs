"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[862],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),h=r,m=u["".concat(l,".").concat(h)]||u[h]||d[h]||i;return n?a.createElement(m,o(o({ref:t},p),{},{components:n})):a.createElement(m,o({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},5966:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const i={title:"rekalogika/reconstitutor"},o=void 0,s={unversionedId:"reconstitutor/index",id:"reconstitutor/index",title:"rekalogika/reconstitutor",description:"This library provides a thin layer that sits above Doctrine events to help you",source:"@site/docs/reconstitutor/index.md",sourceDirName:"reconstitutor",slug:"/reconstitutor/",permalink:"/reconstitutor/",draft:!1,editUrl:"https://github.com/rekalogika/rekalogika-docs/docs/reconstitutor/index.md",tags:[],version:"current",frontMatter:{title:"rekalogika/reconstitutor"},sidebar:"docs",previous:{title:"rekalogika/psr-16-simple-cache-bundle",permalink:"/psr-16-simple-cache-bundle/"},next:{title:"rekalogika/temporary-url-bundle",permalink:"/temporary-url-bundle/"}},l={},c=[{value:"Features",id:"features",level:2},{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Reconstitutor Abstract Class",id:"reconstitutor-abstract-class",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This library provides a thin layer that sits above Doctrine events to help you\nreconstitute/hydrate your entities. It lets you augment Doctrine's hydration\nwith your logic in a concise and expressive class."),(0,r.kt)("p",null,"After Doctrine hydrates an object from the database, this framework gives you\nthe control to hydrate additional properties not handled by Doctrine, without\nhaving to deal with the peculiarities of Doctrine events and Unit of Work. Then,\nafter Doctrine persists the changes to the database, it lets you do similarly\nwith the properties."),(0,r.kt)("p",null,"The most common case of this type of tasks is for handling file uploads, of\nwhich many specialized libraries have already been written. But plenty of other\ncases exist:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A lazy-loading proxy that fetches the real resource using an API call."),(0,r.kt)("li",{parentName:"ul"},"Linking objects that are managed by different object managers, or non-Doctrine\nentities.")),(0,r.kt)("p",null,"These days we usually call the process ",(0,r.kt)("em",{parentName:"p"},"hydration"),". ",(0,r.kt)("em",{parentName:"p"},"Reconstitution")," is the term\nused by Eric Evans in ",(0,r.kt)("em",{parentName:"p"},'"Domain-Driven Design: Tackling Complexity in the Heart of\nSoftware"'),"."),(0,r.kt)("h2",{id:"features"},"Features"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Simple declaration in a class. You can create a reconstitutor class to handle\nthe reconstitution of a specific entity class, entities that implement a\nspecific interface, entities in a class hierarchy, or those with a specific\nPHP attribute."),(0,r.kt)("li",{parentName:"ul"},"Our abstract classes provide ",(0,r.kt)("inlineCode",{parentName:"li"},"get()")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"set()")," methods as a convenience.\nThey let you work with the properties directly, bypassing getters and setters.\nIt is the best practice in reconstitutions as it frees you to have business\nlogic in the getters and setters."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"get()")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"set()")," methods are forwarders to a custom implementation of\nSymfony's ",(0,r.kt)("inlineCode",{parentName:"li"},"PropertyAccessorInterface"),". Therefore, you can use the same\nexceptions defined in ",(0,r.kt)("inlineCode",{parentName:"li"},"PropertyAccessorInterface"),"."),(0,r.kt)("li",{parentName:"ul"},"It has what we think is the correct behavior. It asks your reconstitutor to\nsave only after Doctrine has successfully saved the object. It doesn't rely on\nDoctrine seeing the object being dirty before ",(0,r.kt)("inlineCode",{parentName:"li"},"flush()"),"-ing. i.e. your\nentities don't have to modify a Doctrine-managed property \u2014like\n",(0,r.kt)("inlineCode",{parentName:"li"},"$lastUpdated"),"\u2014 just to make sure the correct Doctrine event will be fired.")),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("p",null,"Use Composer to install the package:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"composer require rekalogika/reconstitutor\n")),(0,r.kt)("p",null,"Add the bundle to your ",(0,r.kt)("inlineCode",{parentName:"p"},"config/bundles.php"),". With Symfony Flex, this should be\ndone automatically."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php",metastring:"title=config/bundles.php",title:"config/bundles.php"},"return [\n    // ...\n    Rekalogika\\Reconstitutor\\RekalogikaReconstitutorBundle::class => ['all' => true],\n];\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"Because everyone knows about file uploads, we are going to use it as an\nexample, even if you probably won't use this framework as a means for handling\nfile uploads."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Speaking about file uploads, we also provide ",(0,r.kt)("a",{parentName:"p",href:"../file"},(0,r.kt)("inlineCode",{parentName:"a"},"rekalogika/file")),"\nframework that handles file uploads and much more. It also uses this library\nbehind the scenes.")),(0,r.kt)("p",null,"Suppose you have an ",(0,r.kt)("inlineCode",{parentName:"p"},"Order")," object that stores a payment receipt in the\n",(0,r.kt)("inlineCode",{parentName:"p"},"paymentReceipt")," property:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"use Symfony\\Component\\HttpFoundation\\File\\File;\nuse Symfony\\Component\\Uid\\UuidV7;\n\nclass Order\n{\n    private string $id;\n    private ?File $paymentReceipt = null;\n\n    public function __construct()\n    {\n        $this->id = new UuidV7;\n    }\n\n    public function getId(): string\n    {\n        return $this->id;\n    }\n\n    public function getPaymentReceipt(): ?File\n    {\n        return $this->paymentReceipt;\n    }\n\n    public function setPaymentReceipt(File $paymentReceipt): void\n    {\n        $this->paymentReceipt = $paymentReceipt;\n    }\n}\n")),(0,r.kt)("p",null,"During the fetching of the object from the database, Doctrine will instantiate\nthe object and hydrate ",(0,r.kt)("inlineCode",{parentName:"p"},"$id")," and other properties that it manages. Then, it will\nbe our reconstitutor's turn to handle the ",(0,r.kt)("inlineCode",{parentName:"p"},"$paymentReceipt")," property. Similar\nthings also happen when the object is persisted to the database, or removed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"use Rekalogika\\Reconstitutor\\AbstractClassReconstitutor;\nuse Symfony\\Component\\HttpFoundation\\File\\File;\n\n/**\n * @extends AbstractClassReconstitutor<Order>\n */\nfinal class OrderReconstitutor extends AbstractClassReconstitutor\n{\n    /**\n     * The class that this reconstitutor manages. It can also be a super class\n     * or an interface.\n     */\n    public static function getClass(): string\n    {\n        return Order::class;\n    }\n\n    /**\n     * When the object is being saved, we check if the paymentReceipt has been\n     * just uploaded. If it is, we save it to a file.\n     */\n    public function onSave(object $order): void\n    {\n        $path = sprintf('/tmp/payment_receipt/%s', $order->getId());\n\n        $file = $this->get($order, 'paymentReceipt');\n\n        if ($file instanceof UploadedFile) {\n            file_put_contents($path, $file->getContent());\n            $this->set($order, 'paymentReceipt', new File($path));\n        }\n    }\n\n    /**\n     * When the object is being loaded from the database, we check if the\n     * supposed payment receipt is already saved. If it is, then we load the\n     * file to the property.\n     */\n    public function onLoad(object $order): void\n    {\n        $path = sprintf('/tmp/payment_receipt/%s', $order->getId());\n\n        if (file_exists($path)) {\n            $file = new File($path);\n        } else {\n            $file = null;\n        }\n\n        $this->set($order, 'paymentReceipt', $file);\n    }\n\n    /**\n     * If the order is being removed, we remove the associated payment receipt\n     * here.\n     */\n    public function onRemove(object $order): void\n    {\n        $path = sprintf('/tmp/payment_receipt/%s', $order->getId());\n\n        if (file_exists($path)) {\n            unlink($path);\n        }\n    }\n}\n")),(0,r.kt)("h2",{id:"reconstitutor-abstract-class"},"Reconstitutor Abstract Class"),(0,r.kt)("p",null,"The example above uses ",(0,r.kt)("inlineCode",{parentName:"p"},"AbstractClassReconstitutor")," where our target object is\nmatched using the class provided by ",(0,r.kt)("inlineCode",{parentName:"p"},"getClass()"),". There is also\n",(0,r.kt)("inlineCode",{parentName:"p"},"AbstractAttributeReconstitutor")," that operates on objects that have a specific\nPHP attribute."))}d.isMDXComponent=!0}}]);