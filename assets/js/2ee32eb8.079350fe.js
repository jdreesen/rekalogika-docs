"use strict";(self.webpackChunkrekalogika_docs=self.webpackChunkrekalogika_docs||[]).push([[9031],{9231:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>l,frontMatter:()=>p,metadata:()=>s,toc:()=>c});var n=a(5893),r=a(1151);const p={title:"SubMapper"},o=void 0,s={id:"mapper/submapper",title:"SubMapper",description:"SubMapper is a highly simplified mapper used in places where you might need to",source:"@site/docs/mapper/15-submapper.md",sourceDirName:"mapper",slug:"/mapper/submapper",permalink:"/mapper/submapper",draft:!1,unlisted:!1,editUrl:"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/mapper/15-submapper.md",tags:[],version:"current",sidebarPosition:15,frontMatter:{title:"SubMapper"},sidebar:"docs",previous:{title:"Manual Mapping using a Class Method",permalink:"/mapper/method-mapper"},next:{title:"Debugging the Mapper",permalink:"/mapper/debugging"}},i={},c=[{value:"<code>map()</code> Method",id:"map-method",level:2},{value:"<code>mapForProperty()</code> Method",id:"mapforproperty-method",level:2}];function d(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:"SubMapper is a highly simplified mapper used in places where you might need to\ndelegate the mapping of another object to the main mapper. It is designed so\nthat you don't have to deal with the complexity of managing types."}),"\n",(0,n.jsxs)(t.p,{children:["In SubMapper, passing the ",(0,n.jsx)(t.code,{children:"Context"})," is optional. SubMapper automatically passes\nthe ",(0,n.jsx)(t.code,{children:"Context"})," from the caller if you don't specifically do it."]}),"\n",(0,n.jsxs)(t.h2,{id:"map-method",children:[(0,n.jsx)(t.code,{children:"map()"})," Method"]}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"map()"})," method maps an object to the class or object you specified."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-php",children:"use Rekalogika\\Mapper\\SubMapper\\SubMapperInterface;\n\n/** @var SubMapperInterface $mapper */\n\n// using class-string as the target type\n$postDto = $mapper->map($source, PostDto::class);\n\n// the target can also be an existing object\n$postDto = new PostDto();\n$mapper->map($source, $postDto);\n"})}),"\n",(0,n.jsxs)(t.h2,{id:"mapforproperty-method",children:[(0,n.jsx)(t.code,{children:"mapForProperty()"})," Method"]}),"\n",(0,n.jsxs)(t.p,{children:["With the ",(0,n.jsx)(t.code,{children:"mapForProperty()"}),", you specify the property name of the variable that\nwill contain the result of the mapping. SubMapper will detect the type of the\nobject or class in ",(0,n.jsx)(t.code,{children:"$containing"})," and use it as the target type for the mapping."]}),"\n",(0,n.jsx)(t.p,{children:"This is useful if the property is an array or an array-like object, as PHP\ndoesn't have generics and it is not simple to specify the type of the array\nelements."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-php",children:"use Rekalogika\\Mapper\\SubMapper\\SubMapperInterface;\n\n/** @var SubMapperInterface $mapper */\n\n$result = $mapper->mapForProperty($source, $containing, $propertyName);\n"})}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"$containing"})," can be a class string or an existing object. If it is an\nexisting object, SubMapper will attempt to retrieve the current object from the\nproperty and map the source to it."]})]})}function l(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},1151:(e,t,a)=>{a.d(t,{Z:()=>s,a:()=>o});var n=a(7294);const r={},p=n.createContext(r);function o(e){const t=n.useContext(p);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),n.createElement(p.Provider,{value:t},e.children)}}}]);