"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7469],{3905:(e,t,o)=>{o.d(t,{Zo:()=>u,kt:()=>h});var n=o(7294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function l(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function c(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?l(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):l(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function a(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)o=l[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)o=l[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var i=n.createContext({}),s=function(e){var t=n.useContext(i),o=t;return e&&(o="function"==typeof e?e(t):c(c({},t),e)),o},u=function(e){var t=s(e.components);return n.createElement(i.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},b=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),p=s(o),b=r,h=p["".concat(i,".").concat(b)]||p[b]||d[b]||l;return o?n.createElement(h,c(c({ref:t},u),{},{components:o})):n.createElement(h,c({ref:t},u))}));function h(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=o.length,c=new Array(l);c[0]=b;var a={};for(var i in t)hasOwnProperty.call(t,i)&&(a[i]=t[i]);a.originalType=e,a[p]="string"==typeof e?e:r,c[1]=a;for(var s=2;s<l;s++)c[s]=o[s];return n.createElement.apply(null,c)}return n.createElement.apply(null,o)}b.displayName="MDXCreateElement"},4437:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>d,frontMatter:()=>l,metadata:()=>a,toc:()=>s});var n=o(7462),r=(o(7294),o(3905));const l={title:"Selectable Abstraction"},c=void 0,a={unversionedId:"doctrine-collections-decorator/cookbook/selectable-abstraction",id:"doctrine-collections-decorator/cookbook/selectable-abstraction",title:"Selectable Abstraction",description:"Doctrine ORM uses collection objects that also implement the Selectable",source:"@site/docs/doctrine-collections-decorator/cookbook/13-selectable-abstraction.md",sourceDirName:"doctrine-collections-decorator/cookbook",slug:"/doctrine-collections-decorator/cookbook/selectable-abstraction",permalink:"/doctrine-collections-decorator/cookbook/selectable-abstraction",draft:!1,editUrl:"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/doctrine-collections-decorator/cookbook/13-selectable-abstraction.md",tags:[],version:"current",sidebarPosition:13,frontMatter:{title:"Selectable Abstraction"},sidebar:"docs",previous:{title:"Record Precounting",permalink:"/doctrine-collections-decorator/cookbook/record-precounting"},next:{title:"Decorating Member Objects",permalink:"/doctrine-collections-decorator/cookbook/decorating-members"}},i={},s=[{value:"The Decorator Class",id:"the-decorator-class",level:2},{value:"Usage in the <code>one-to-many</code> Side",id:"usage-in-the-one-to-many-side",level:2},{value:"The Caller Side",id:"the-caller-side",level:2}],u={toc:s},p="wrapper";function d(e){let{components:t,...o}=e;return(0,r.kt)(p,(0,n.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Doctrine ORM uses collection objects that also implement the ",(0,r.kt)("inlineCode",{parentName:"p"},"Selectable"),"\ninterface. It gives us the ",(0,r.kt)("inlineCode",{parentName:"p"},"matching()")," method that allows us to filter the\ncollection using a criteria object. It is very powerful and convenient, but also\nan abstraction leak. To use it, the caller needs to know the internal structure\nof the member entity class. Without restraint, the knowledge about the internal\ndetails of a popular class will be spread all over your codebase, and updating\nthe class can potentially become a nightmare."),(0,r.kt)("p",null,"To solve the problem, we can decorate the collection object to keep the\n",(0,r.kt)("inlineCode",{parentName:"p"},"Selectable")," interface private and expose more concise, higher-level methods\nthat the caller can use."),(0,r.kt)("h2",{id:"the-decorator-class"},"The Decorator Class"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"use Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\Common\\Collections\\Criteria;\nuse Doctrine\\Common\\Collections\\Selectable;\nuse Rekalogika\\Collections\\Decorator\\AbstractDecorator\\AbstractCollectionDecorator;\n\n/**\n * @extends AbstractCollectionDecorator<array-key,Book>\n */\nclass BookCollection extends AbstractCollectionDecorator\n{\n    /**\n     * @param Collection<array-key,Book>&Selectable<array-key,Book> $collection\n     */\n    public function __construct(private Collection $collection)\n    {\n        if (!$collection instanceof Selectable) {\n            throw new \\RuntimeException('The wrapped collection must implement the Selectable interface.');\n        }\n    }\n\n    /**\n     * @return Collection<array-key,Book>&Selectable<array-key,Book>\n     */\n    #[\\Override]\n    protected function getWrapped(): Collection&Selectable\n    {\n        return $this->collection;\n    }\n\n    // highlight-start\n    public function findByAuthor(string $author): self\n    {\n        $criteria = Criteria::create()\n            ->where(Criteria::expr()->eq('author', $author));\n\n        $result = $this->getWrapped()->matching($criteria);\n\n        return new self($result);\n    }\n    // highlight-end\n}\n")),(0,r.kt)("h2",{id:"usage-in-the-one-to-many-side"},"Usage in the ",(0,r.kt)("inlineCode",{parentName:"h2"},"one-to-many")," Side"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"use Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\n\n#[ORM\\Entity()]\nclass BookShelf\n{\n    /**\n     * @var Collection<array-key,Book>\n     */\n    #[ORM\\OneToMany(targetEntity: Book::class)]\n    private Collection $books;\n\n    public function __construct()\n    {\n        $this->books = new ArrayCollection();\n    }\n\n    public function getBooks(): BookCollection\n    {\n        // highlight-next-line\n        return new BookCollection($this->books);\n    }\n}\n")),(0,r.kt)("h2",{id:"the-caller-side"},"The Caller Side"),(0,r.kt)("p",null,"Then the caller will be able to do something like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/** @var BookShelf $bookShelf */\n\n$booksByJohnDoe = $bookShelf->getBooks()->findByAuthor('John Doe');\n")))}d.isMDXComponent=!0}}]);