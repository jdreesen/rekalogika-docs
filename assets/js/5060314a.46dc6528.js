"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[944],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),p=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return i.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),h=r,f=u["".concat(l,".").concat(h)]||u[h]||d[h]||a;return n?i.createElement(f,o(o({ref:t},c),{},{components:n})):i.createElement(f,o({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<a;p++)o[p]=n[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}h.displayName="MDXCreateElement"},3848:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var i=n(7462),r=(n(7294),n(3905));const a={title:"Tips and Caveats"},o=void 0,s={unversionedId:"domain-event/tips",id:"domain-event/tips",title:"Tips and Caveats",description:"This chapter explains the tips and our best practices that others might find",source:"@site/docs/domain-event/04-tips.md",sourceDirName:"domain-event",slug:"/domain-event/tips",permalink:"/domain-event/tips",draft:!1,editUrl:"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/domain-event/04-tips.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Tips and Caveats"},sidebar:"docs",previous:{title:"Immediate Dispatcher Handling & Troubleshooting",permalink:"/domain-event/immediate-dispatcher"},next:{title:"rekalogika/file",permalink:"/file/"}},l={},p=[{value:"Use UUIDs as Identifiers",id:"use-uuids-as-identifiers",level:2},{value:"Choosing Dispatching Strategy",id:"choosing-dispatching-strategy",level:2},{value:"Caveats",id:"caveats",level:2}],c={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This chapter explains the tips and our best practices that others might find\nuseful, but not strictly required."),(0,r.kt)("h2",{id:"use-uuids-as-identifiers"},"Use UUIDs as Identifiers"),(0,r.kt)("p",null,"Use UUIDs as entity identifiers & have the entities generate one for themselves\non instantiation. That means new entities already have an ID before ",(0,r.kt)("inlineCode",{parentName:"p"},"flush()"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"use Symfony\\Component\\Uid\\UuidV7;\n\nclass Post\n{\n    private string $id;\n\n    public function __construct(string $title)\n    {\n        $this->id = new UuidV7();\n    }\n\n    // ...\n}\n")),(0,r.kt)("p",null,"Therefore, you can reliably store the ID in your event objects, instead of the\nobject itself. Using the ID in the events means your events can be reliably\nserialized, and you can pass them anywhere without alteration."),(0,r.kt)("h2",{id:"choosing-dispatching-strategy"},"Choosing Dispatching Strategy"),(0,r.kt)("p",null,"If you want to do something similar to what you are used to doing with\napplication events, you probably want the post-flush strategy."),(0,r.kt)("p",null,"Use post-flush for things that should occur only if the change is successful,\nlike notifications, etc."),(0,r.kt)("p",null,"Use pre-flush events to make alterations to your domain that will be\n",(0,r.kt)("inlineCode",{parentName:"p"},"flush()"),"-ed together along with the other changes."),(0,r.kt)("h2",{id:"caveats"},"Caveats"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Currently only supports ",(0,r.kt)("inlineCode",{parentName:"li"},"EntityManager"),". Support for other ",(0,r.kt)("inlineCode",{parentName:"li"},"ObjectManager"),"s\nis planned."),(0,r.kt)("li",{parentName:"ul"},"It is not aware of explicit transactions yet. You should dispatch the events\nmanually if you are using an explicit transaction as described above. In the\nfuture, we have plans to dispatch post-flush events after the outermost\n",(0,r.kt)("inlineCode",{parentName:"li"},"commit()"),", and dispatch pre-flush events before every ",(0,r.kt)("inlineCode",{parentName:"li"},"commit()"),"."),(0,r.kt)("li",{parentName:"ul"},"It is an inconvenience that Symfony Event Dispatcher does not currently\nsupport event inheritance. We cannot have a single listener for an entire\nclass of domain events, and for example, use it to implement the outbox\npattern. We plan to fix this in the future.")))}d.isMDXComponent=!0}}]);