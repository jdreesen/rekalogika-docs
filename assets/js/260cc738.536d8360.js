"use strict";(self.webpackChunkrekalogika_docs=self.webpackChunkrekalogika_docs||[]).push([[3804],{9281:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var n=t(5893),a=t(1151);const o={title:"Mapping Arrays & Array-Like Objects"},i=void 0,s={id:"mapper/collection",title:"Mapping Arrays & Array-Like Objects",description:"This chapter describes how to map arrays and array-like objects.",source:"@site/docs/mapper/02-collection.md",sourceDirName:"mapper",slug:"/mapper/collection",permalink:"/mapper/collection",draft:!1,unlisted:!1,editUrl:"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/mapper/02-collection.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Mapping Arrays & Array-Like Objects"},sidebar:"docs",previous:{title:"Basic Usage",permalink:"/mapper/usage"},next:{title:"Mapping to Abstract Classes and Interfaces",permalink:"/mapper/inheritance"}},c={},l=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Mapping to <code>Traversable</code>",id:"mapping-to-traversable",level:2}];function d(e){const r={admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.p,{children:"This chapter describes how to map arrays and array-like objects."}),"\n",(0,n.jsx)(r.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,n.jsx)(r.p,{children:"To map between arrays or array-like objects, you need to type-hint the array\non the target side. For example:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-php",children:"class ObjectWithArrayPropertyDto\n{\n    /**\n     * @var ?array<int,ObjectWithScalarPropertiesDto>\n     */\n    public ?array $property = null;\n}\n"})}),"\n",(0,n.jsxs)(r.p,{children:["In the above case, if the source has an array-like ",(0,n.jsx)(r.code,{children:"$property"}),", the mapper will\nmap it to the target's ",(0,n.jsx)(r.code,{children:"$property"})," array, and map the source member to the\nobject ",(0,n.jsx)(r.code,{children:"ObjectWithScalarPropertiesDto"}),"."]}),"\n",(0,n.jsx)(r.admonition,{type:"info",children:(0,n.jsx)(r.p,{children:"Without the type-hint, the mapper will copy the source objects to the target\narray as-is."})}),"\n",(0,n.jsx)(r.p,{children:"Supported types of the target side are:"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsx)(r.li,{children:"Normal arrays"}),"\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.code,{children:"ArrayAccess"})}),"\n",(0,n.jsx)(r.li,{children:(0,n.jsx)(r.code,{children:"ArrayObject"})}),"\n",(0,n.jsxs)(r.li,{children:["Doctrine ",(0,n.jsx)(r.code,{children:"Collection"})]}),"\n",(0,n.jsxs)(r.li,{children:["Doctrine ",(0,n.jsx)(r.code,{children:"ArrayCollection"})]}),"\n"]}),"\n",(0,n.jsxs)(r.p,{children:["The source side must be an array or a ",(0,n.jsx)(r.code,{children:"Traversable"})," object, i.e. anything that\nyou can ",(0,n.jsx)(r.code,{children:"foreach()"})," over."]}),"\n",(0,n.jsxs)(r.h2,{id:"mapping-to-traversable",children:["Mapping to ",(0,n.jsx)(r.code,{children:"Traversable"})]}),"\n",(0,n.jsxs)(r.p,{children:["You also have the option to map to a ",(0,n.jsx)(r.code,{children:"Traversable"})," object. If the target\nproperty is type-hinted with ",(0,n.jsx)(r.code,{children:"Traversable"}),", the mapper will map to a ",(0,n.jsx)(r.code,{children:"Generator"}),"\nobject."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-php",children:"class ObjectWithArrayPropertyDto\n{\n    /**\n     * @var ?\\Traversable<int,ObjectWithScalarPropertiesDto>\n     */\n    public ?\\Traversable $property = null;\n}\n"})}),"\n",(0,n.jsxs)(r.p,{children:["This way, you are getting lazy-loading if the source supports lazy loading (like\nDoctrine ",(0,n.jsx)(r.code,{children:"PersistentCollection"}),"), the source will not be hydrated unless the\nconsumer uses the mapped property on the target side."]}),"\n",(0,n.jsxs)(r.p,{children:["Furthermore, you are also getting stream mapping using ",(0,n.jsx)(r.code,{children:"Generator"}),", which can\nsave a lot of memory if your source is large."]}),"\n",(0,n.jsxs)(r.p,{children:["If the source is an array or an object that implements ",(0,n.jsx)(r.code,{children:"Countable"}),", you will\nalso get a ",(0,n.jsx)(r.code,{children:"Countable"})," target, i.e. you can ",(0,n.jsx)(r.code,{children:"count()"})," or ",(0,n.jsx)(r.code,{children:"->count()"})," it. In\naddition, if your source is an extra-lazy Doctrine Collection, the consumer will\nbe able to ",(0,n.jsx)(r.code,{children:"count()"})," the target without causing a full hydration of the source."]})]})}function p(e={}){const{wrapper:r}={...(0,a.a)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},1151:(e,r,t)=>{t.d(r,{Z:()=>s,a:()=>i});var n=t(7294);const a={},o=n.createContext(a);function i(e){const r=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),n.createElement(o.Provider,{value:r},e.children)}}}]);