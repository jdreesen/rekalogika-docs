"use strict";(self.webpackChunkrekalogika_docs=self.webpackChunkrekalogika_docs||[]).push([[3541],{5319:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>p,default:()=>l,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var r=t(5893),a=t(1151);const o={title:"Manual Mapping using a Class Method"},p=void 0,i={id:"mapper/method-mapper",title:"Manual Mapping using a Class Method",description:"This chapter describes how to map using a class method.",source:"@site/docs/mapper/14-method-mapper.md",sourceDirName:"mapper",slug:"/mapper/method-mapper",permalink:"/mapper/method-mapper",draft:!1,unlisted:!1,editUrl:"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/mapper/14-method-mapper.md",tags:[],version:"current",sidebarPosition:14,frontMatter:{title:"Manual Mapping using a Class Method"},sidebar:"docs",previous:{title:"Overriding a Mapping Table Entry",permalink:"/mapper/overriding-transformer"},next:{title:"Debugging the Mapper",permalink:"/mapper/debugging"}},c={},s=[{value:"Mapping from another Object",id:"mapping-from-another-object",level:2},{value:"Mapping to Another Object",id:"mapping-to-another-object",level:2},{value:"Sub Mapper",id:"sub-mapper",level:2}];function h(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"This chapter describes how to map using a class method."}),"\n",(0,r.jsxs)(n.p,{children:["This feature is an alternative to creating a transformer. It is useful if your\nclass requires a custom logic to map the data. You can make your DTO implement\nthe ",(0,r.jsx)(n.code,{children:"MapToObjectInterface"})," or ",(0,r.jsx)(n.code,{children:"MapFromObjectInterface"})," and create the required\nmethods."]}),"\n",(0,r.jsxs)(n.p,{children:["Suppose you are using the ",(0,r.jsx)(n.code,{children:"brick/money"})," library to represent money in your\napplication, and you need to map the ",(0,r.jsx)(n.code,{children:"Money"})," object to the following DTO:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="src/Dto/MoneyDto.php"',children:"namespace App\\Dto;\n\nclass MoneyDto\n{\n    public function __construct(\n        private string $amount,\n        private string $currency,\n    ) {\n    }\n\n    public function getAmount(): string\n    {\n        return $this->amount;\n    }\n\n    public function getCurrency(): string\n    {\n        return $this->currency;\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"mapping-from-another-object",children:"Mapping from another Object"}),"\n",(0,r.jsxs)(n.p,{children:["You can have your DTO implement the ",(0,r.jsx)(n.code,{children:"MapFromObjectInterface"})," and create the\n",(0,r.jsx)(n.code,{children:"mapFromObject()"})," method:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="src/Dto/MoneyDto.php"',children:"namespace App\\Dto;\n\nuse Brick\\Money\\Money;\nuse Rekalogika\\Mapper\\Context\\Context;\nuse Rekalogika\\Mapper\\MethodMapper\\MapFromObjectInterface;\nuse Rekalogika\\Mapper\\MethodMapper\\SubMapperInterface;\n\n// highlight-next-line\nfinal class MoneyDto implements MapFromObjectInterface\n{\n    // ...\n\n    // highlight-start\n    public static function mapFromObject(\n        object $source,\n        SubMapperInterface $mapper,\n        Context $context\n    ): static {\n        if (!$source instanceof Money) {\n            throw new \\InvalidArgumentException('Source must be instance of ' . Money::class);\n        }\n\n        return new static(\n            $source->getAmount()->__toString(),\n            $source->getCurrency()->getCurrencyCode(),\n        );\n    }\n    // highlight-end\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Then, the next time you are mapping from the ",(0,r.jsx)(n.code,{children:"Money"})," object to the ",(0,r.jsx)(n.code,{children:"MoneyDto"}),"\nobject, the mapper will call the ",(0,r.jsx)(n.code,{children:"mapFromObject()"})," method to get the resulting\n",(0,r.jsx)(n.code,{children:"MoneyDto"}),". The mapping will be done even if your ",(0,r.jsx)(n.code,{children:"Money"})," object is deeply\nburied within the object you are mapping from."]}),"\n",(0,r.jsx)(n.h2,{id:"mapping-to-another-object",children:"Mapping to Another Object"}),"\n",(0,r.jsxs)(n.p,{children:["You can also get the reverse of the above by implement the\n",(0,r.jsx)(n.code,{children:"MapToObjectInterface"})," and create the ",(0,r.jsx)(n.code,{children:"mapToObject()"})," method."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="src/Dto/MoneyDto.php"',children:"namespace App\\Dto;\n\nuse Brick\\Money\\Money;\nuse Rekalogika\\Mapper\\Context\\Context;\nuse Rekalogika\\Mapper\\MethodMapper\\MapToObjectInterface;\nuse Rekalogika\\Mapper\\MethodMapper\\SubMapperInterface;\n\n// highlight-next-line\nfinal class MoneyDto implements MapToObjectInterface\n{\n    // ...\n\n    // highlight-start\n    public function mapToObject(\n        object|string $target,\n        SubMapperInterface $mapper,\n        Context $context\n    ): object {\n        return Money::of($this->amount, $this->currency);\n    }\n    // highlight-end\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"sub-mapper",children:"Sub Mapper"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"$mapper"})," parameter in the ",(0,r.jsx)(n.code,{children:"mapFromObject()"})," and ",(0,r.jsx)(n.code,{children:"mapToObject()"})," methods\nprovides you with the sub mapper. You can use it to map another object, so you\ndon't have to do everything yourself."]}),"\n",(0,r.jsxs)(n.p,{children:["There are two methods in the sub mapper that you can use. The first is ",(0,r.jsx)(n.code,{children:"map()"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"/** @var SubMapperInterface $mapper */\n\n// the $target can be an existing object, or a class-string\n$result = $mapper->map($source, $target);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The other is ",(0,r.jsx)(n.code,{children:"mapForProperty()"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"/** @var SubMapperInterface $mapper */\n\n$result = $mapper->mapForProperty($source, $className, $propertyName);\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"mapForProperty()"})," will detect the type of the specified property, and then use\nit as the target type for the mapping. This is useful if the property is an\narray or an array-like object, as PHP doesn't have generics and it is not simple\nto specify the type of the array elements."]})]})}function l(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>i,a:()=>p});var r=t(7294);const a={},o=r.createContext(a);function p(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:p(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);