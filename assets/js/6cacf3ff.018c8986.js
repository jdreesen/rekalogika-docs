"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[160],{3905:(e,t,i)=>{i.d(t,{Zo:()=>p,kt:()=>u});var n=i(7294);function r(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function a(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function o(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?a(Object(i),!0).forEach((function(t){r(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):a(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function l(e,t){if(null==e)return{};var i,n,r=function(e,t){if(null==e)return{};var i,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)i=a[n],t.indexOf(i)>=0||(r[i]=e[i]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)i=a[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var d=n.createContext({}),c=function(e){var t=n.useContext(d),i=t;return e&&(i="function"==typeof e?e(t):o(o({},t),e)),i},p=function(e){var t=c(e.components);return n.createElement(d.Provider,{value:t},e.children)},f="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var i=e.components,r=e.mdxType,a=e.originalType,d=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),f=c(i),m=r,u=f["".concat(d,".").concat(m)]||f[m]||s[m]||a;return i?n.createElement(u,o(o({ref:t},p),{},{components:i})):n.createElement(u,o({ref:t},p))}));function u(e,t){var i=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=i.length,o=new Array(a);o[0]=m;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[f]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<a;c++)o[c]=i[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,i)}m.displayName="MDXCreateElement"},6517:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>s,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var n=i(7462),r=(i(7294),i(3905));const a={title:"Creating Filters"},o=void 0,l={unversionedId:"file/derivation",id:"file/derivation",title:"Creating Filters",description:"This chapter describes the concept of file derivation and how to create filters.",source:"@site/docs/file/06-derivation.md",sourceDirName:"file",slug:"/file/derivation",permalink:"/file/derivation",draft:!1,editUrl:"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/file/06-derivation.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"Creating Filters"},sidebar:"docs",previous:{title:"Metadata",permalink:"/file/metadata"},next:{title:"Miscellaneous",permalink:"/file/misc"}},d={},c=[{value:"Derivation",id:"derivation",level:2},{value:"Low-Level Implementation",id:"low-level-implementation",level:2},{value:"Filter Pattern",id:"filter-pattern",level:2}],p={toc:c},f="wrapper";function s(e){let{components:t,...i}=e;return(0,r.kt)(f,(0,n.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This chapter describes the concept of file derivation and how to create filters."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"This chapter is intended for developers who want to create their own filters.\nEnd users who simply want to use the ready-made filters can skip this chapter.")),(0,r.kt)("h2",{id:"derivation"},"Derivation"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"FileInterface")," supports what we call 'derivation'. A file can have one or more\nderivation of itself. For example, an image file can have a thumbnail, medium,\nand large derivation. A derived file can also be derived further. For example, a\nthumbnail can be in the original aspect ratio, or square-cropped."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"FileInterface")," provides the method ",(0,r.kt)("inlineCode",{parentName:"p"},"getDerivation()")," that returns a\n",(0,r.kt)("inlineCode",{parentName:"p"},"FilePointer")," to the derived file. Our ",(0,r.kt)("inlineCode",{parentName:"p"},"File")," objects ensure that a derivation\ncannot be made if the file is in the local filesystem, or in an ad-hoc\nfilesystem, to avoid cluttering the local filesystem with unwanted files."),(0,r.kt)("h2",{id:"low-level-implementation"},"Low-Level Implementation"),(0,r.kt)("p",null,"At the low level, a derivation is created simply by appending the derivation ID\nto the original file's key. For example, if the original file's key is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"entity/ffa87ef3fc5388bc8b666e2cec17d27cc493d0c1/image/e5/80/72/6d/31337\n")),(0,r.kt)("p",null,"then, with the derivation ID '100px', the derived file's key becomes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"entity/ffa87ef3fc5388bc8b666e2cec17d27cc493d0c1/image/e5/80/72/6d/31337.d/100px\n")),(0,r.kt)("p",null,"Deleting the original file will also result in the deletion of all of its\nderivations."),(0,r.kt)("p",null,"Derivation can be nested. Suppose the derived file above will be derived further\nwith the derivation ID of 'square', then the derived file's key becomes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"entity/ffa87ef3fc5388bc8b666e2cec17d27cc493d0c1/image/e5/80/72/6d/31337.d/100px.d/square\n")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Because each derivation step requires a roundtrip to the storage backend, it is\nnot recommended to nest derivations too deep.")),(0,r.kt)("h2",{id:"filter-pattern"},"Filter Pattern"),(0,r.kt)("p",null,"Derivation can be used as the building block of filters. A filter is a service\nthat perform opportunistic creation and caching of a derived file from a source\nfile."),(0,r.kt)("p",null,"A filter can be applied to a ",(0,r.kt)("inlineCode",{parentName:"p"},"FileInterface")," and does the following:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Obtain the original file."),(0,r.kt)("li",{parentName:"ol"},"Determine the derivation ID from the parameters provided by the caller. For\nexample, if the caller wants to get a square thumbnail of an image, the\nfilter can use the derivation ID like 'thumbnail-square'."),(0,r.kt)("li",{parentName:"ol"},"Call ",(0,r.kt)("inlineCode",{parentName:"li"},"FileInterface::getDerivation()")," to get a pointer to the derived file."),(0,r.kt)("li",{parentName:"ol"},"Call ",(0,r.kt)("inlineCode",{parentName:"li"},"FileRepository::get()")," to get the derived file.",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"If the derived file does not exist, write the derived file to it."),(0,r.kt)("li",{parentName:"ol"},"If the derived file exists and newer than the original file, return it."),(0,r.kt)("li",{parentName:"ol"},"If the derived file exists and older than the original file, create a\nderivation out of the original file, then overwrite the old derived file.")))),(0,r.kt)("p",null,"The caller can then use the filter to create a modified version of the original\nfile without having to worry about the details."),(0,r.kt)("p",null,"We provide the package\n",(0,r.kt)("a",{parentName:"p",href:"/file-bundle/filter-development"},(0,r.kt)("inlineCode",{parentName:"a"},"rekalogika/file-derivation"))," to\nstreamline the creation of filters within the Symfony framework."))}s.isMDXComponent=!0}}]);